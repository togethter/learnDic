
1、我们创建的每一个函数，解析器都会将函数添加一个属性prototype
2、这个属性对应这原型对象
3、函数作为普通函数调用prototype没有任何作用
4、函数以构造函数调用时，他所创建的对象中都会有一个隐含的属性，指向该构造函数的原型对象，
我们可以通过_proto_来访问该属性
5、原型对象，存放公共的内容，
6、访问对象的一个属性或方法时，先在对象中找，有则返回，没有则去原型对象中寻找，找到直接返回，没有则到原型
的原型中寻找，直到找到object对象的原型，object对象的原型没有原型，object中没有找到，则返回underfined
7、打印对象，输出对象的toString()方法的返回值
8、输出对象时可以为一个对象添加一个toString方法




垃圾回收
1、自动回收垃圾机制，会制动将这些垃圾对象从内存中销毁
2、我们需要做的时要讲不在使用的对象设置null即可


数组(Array)
1、数组也是一个对象，使用数字作为索引
2、存储性能好
3、创建对象eg:var arr = new Array();
4、使用typeof检查一个数组时，会返回object
5、向数组中添加元素 数组[索引] = 值
6、如果读取不存在的索引，他不会报错而返回undefinded
7、length，获取数组的长度
8、push(),数组末尾添加一个或多个元素，并返回数组的新长度
9、pop(),删除数组的最后一个元素，删除的元素作为返回值返回
10、unshift(),向数组开头添加一个或多个元素，并返回新的数组长度
11、shift(),删除数组的每一个元素，并将删除的元素作为返回值返回
`for`、`forEach`
forEach：
1、只支持IE8以上的浏览器，否则使用for
2、函数作为参数
3、浏览器在回调函数中传递三个参数
第一个参数，正在遍历的元素
第二个参数，当前正在遍历的元素的索引
第三个参数，正在遍历的数组


slice()
1、可以用来从数组提取指定元素
2、该方法不会改变元素数组，而是将截取的元素封装到一个新数组中返回
3、截取开始的位置索引，包含开始索引
4、截取结束的位置索引不包含结束索引,第二个参数可以胜率不写，此时会截取从开始索引往后的所有的元素
5、索引可以传递一个负值，如果传递一个负值，从后向前计算，-1倒数第一个，-2倒数第二个

splice()
1、删除数组中指定的元素
2、arr.splice(0,2)
3、使用splice()会影响到原数组，会将指定元素从数组中删除，并将被删除的元素作为值返回
参数：
1、第一个，表示开始位置的索引
2、第二个，表示删除的数量
3、第三个及以后，可以传递一些新的元素，这些元素将会自动插入到开始位置
4、eg:arr = ["A","B","C","G","H"]; var result = arr.splice(3,0,"牛魔王","铁扇公主","红孩儿")


concat()
1、可以将两个或者多个数组，并将新的数组返回
2、该方法不会对原数组产生影响
3、var result = arr.concat(arr2,arr3,"牛魔王","铁扇公主")

join
1、将数组转换为字符串
2、不会对原数组产生影响，而是将转换后的字符串作为结果返回
3、result = arr.join(),默认以 `,`元素连接，可以指定一个参数来连接arr.join("hello")

reverse()
1、翻转数组，前边去后边，后边的去前边
2、直接会直接修改原数组

sort()
1、可以用来对数组中的元素进行排序
2、会影响原数组，默认会按照unicode编码进行排列
3、即使是数字数组，使用sort排序也会按照unicode编码来排序，
所以对数字排序时，可能会得到错误的结果
4、可以自己指定排序的规则
arr.sort(funtion(a,b){
return a-b;
})


apply 和 call 的区别
apply:
1、ECMAScript 规范给所有函数都定义了 call 与 apply 两个方法，它们的应用非常广泛，它们的作用也是一模一样，
只是传参的形式有区别而已
2、apply 方法传入两个参数：一个是作为函数上下文的对象，另外一个是作为函数参数所组成的数组
3、eg:
var obj = {
    name : 'linxin'
}

function func(firstName, lastName){
    console.log(firstName + ' ' + this.name + ' ' + lastName);
}

func.apply(obj, ['A', 'B']);    // A linxin B
4、可以看到，obj 是作为函数上下文的对象，函数 func 中 this 指向了 obj 这个对象。参数 A 和 B 
是放在数组中传入 func 函数，分别对应 func 参数的列表元素


call:
1、call方法第一个参数也是作为函数上下文的对象，但是后面传入的是一个参数列表，而不是单个数组
2、eg:
var obj = {
    name: 'linxin'
}

function func(firstName, lastName) {
    console.log(firstName + ' ' + this.name + ' ' + lastName);
}

func.call(obj, 'C', 'D');       // C linxin D
3、对比 apply 我们可以看到区别，C 和 D 是作为单独的参数传给 func 函数，而不是放到数组中
对于什么时候该用什么方法，其实不用纠结。如果你的参数本来就存在一个数组中，那自然就用 apply，
如果参数比较散乱相互之间没什么关联，就用 call

apply 和 call 的用法
1、1.改变 this 指向
2、eg:
var obj = {
    name: 'linxin'
}

function func() {
    console.log(this.name);
}

func.call(obj);       // linxin
我们知道，call 方法的第一个参数是作为函数上下文的对象，这里把 obj 作为参数传给了 func，此时函数里的 this
便指向了 obj 对象。此处 func 函数里其实相当于
function func() {
    console.log(obj.name);
}
3、借用别的对象的方法
先看例子

var Person1  = function () {
    this.name = 'linxin';
}
var Person2 = function () {
    this.getname = function () {
        console.log(this.name);
    }
    Person1.call(this);
}
var person = new Person2();
person.getname();       // linxin
4、从上面我们看到，Person2 实例化出来的对象 person 通过 getname 方法拿到了 Person1 中的 name。
因为在 Person2 中，Person1.call(this) 的作用就是使用 Person1 对象代替 this 对象，那么 Person2
就有了 Person1 中的所有属性和方法了，相当于 Person2 继承了 Person1 的属性和方法。
5、apply、call 方法都会使函数立即执行，因此它们也可以用来调用函数
function func() {
    console.log('linxin');
}
func.call();            // linxin
6、call 和 bind 的区别

call 和 bind 的区别
1、在 EcmaScript5 中扩展了叫 bind 的方法，在低版本的 IE 中不兼容。它和 call 很相似，接受的参数有两部分，
第一个参数是是作为函数上下文的对象，第二部分参数是个列表，可以接受多个参数。
它们之间的区别有以下两点
2、bind 发返回值是函数
var obj = {
    name: 'linxin'
}

function func() {
    console.log(this.name);
}

var func1 = func.bind(obj);
func1();     // linxin
bind 方法不会立即执行，而是返回一个改变了上下文 this 后的函数。而原函数 func 中的 this 并没有被改变，
依旧指向全局对象 window。
3、参数的使用
function func(a, b, c) {
    console.log(a, b, c);
}
var func1 = func.bind(null,'linxin');

func('A', 'B', 'C');            // A B C
func1('A', 'B', 'C');           // linxin A B
func1('B', 'C');                // linxin B C
func.call(null, 'linxin');      // linxin undefined undefined

call 是把第二个及以后的参数作为 func 方法的实参传进去，而 func1 方法的实参实则是在 bind 中参数的基础上再往后排。

在低版本浏览器没有 bind 方法，我们也可以自己实现一个。

if (!Function.prototype.bind) {
        Function.prototype.bind = function () {
            var self = this,                        // 保存原函数
                context = [].shift.call(arguments), // 保存需要绑定的this上下文
                args = [].slice.call(arguments);    // 剩余的参数转为数组
            return function () {                    // 返回一个新函数
                self.apply(context,[].concat.call(args, [].slice.call(arguments)));
            }
        }
    }




解析器在调用函数每次都会想函数内部传递一个隐含的参数-this
1、以函数的形式调用时，this永远是window
2、以方法的调用时，this就是调用方法的那个对象
3、以构造函数形式调用时，this就是新建的那个对象
4、使用call和apply调用时，this是指定的那个对象


在调用函数时，浏览器每次都会传递进两个隐含的参数
1、this
2、arguments，是一个类数组对象，通过索引来操作数据和获取长度
3、argument[0],argument[1],第一个实参，第二个实参



Date 对象
1、表示一个时间
2、var d = new Date();
3、构造函数中传递一个表示时间的字符串为参数，var d2 new date("12/03/2011 11:10;30")
getDate(),获取当前日期对象是几日
getDay(),获取当前日期对象是周几，会返回一个0-6的值
getMonth(),获取当前时间对象的月份,0表示1月，1表示2月，11表示12月
getFullYear(),获取当前日期对象的年份
getTime(),获取当前日期对象的时间戳，时间戳时从格林时间1970年1月1日，0时0分0秒到当前日期所花费的毫秒数
计算机底层在保存日期时使用都是时间戳
1s=1000ms
获取当前时间戳
time = Date.now()
console.log(time)
利用时间戳来测试代码的执行的性能
Math,math和其他的对象不同，它不是一个构造函数，它属于一个工具类，不用创建对象，它里面封装了数学运算
1、Math.PI，表示圆周率
2、abs()，绝对值
3、ceil(),向上取值，小数位只要有值就自动进1
4、floor(),向下取值，小数部分会被舍掉
5、round(),对一个数进行四舍五入取整
6、random(),可以用来生成一个0-1之间的随机数，生成一个0-10的随机数
生成一个1-10
生成一个x-y之间的随机数
Math.round(math.random().(y-x) + x)
7、Max()可以获取多个数中的最大值
8、Min()获取多个数中的最小值
9、Math.pow(x,y),返回x的y次幂
10、Math.sqrt(),用于对一个数的开放运算
11、基本数据类型`String` `Numbner` `Boolean` `Null` `undefined`
12、引用数据类型 `Object`
String:将基本数据类型字符串转换为String对象
Number:可以将基本数据类型数字转换为Number对象
Boolean:可以将基本数据类型的布尔值转换为Boolean对象，但是注意，我们实际应用中不会使用基本类型的对象
如果使用基本数据类对象在做一些比较时可能会带来一些不可预期的结果

length属性,可以用来获取字符串长度
charAt(),可以返回字符串，指定位置的字符str.chatAt(0)
根据索引获取指定的字符
charcodeAt(),获取指定位置字符的字符编码,unicode编码
fromcharcode,根据字符编码获取字符
concat(),可以用来连接两个或多个字符串，作用和+一样
indexof()，检索一个字符串中是否含有一个指定内容,如果字符串中包含该内容，则会返回其第一次索引的位置
如果没有找到则返回-1
lastIndexof(),该方法的用法和indexof()一样，不同的时indexof是从前往后找，而lastIndexOf是从后向前找
也可以指定开始查找的位置
str = "hello hatddd"
result = str.indexof("h",1);
result = str.lastindexof("h",5)


sqlite
1、可以讲一个字符串拆分为一个数组
2、方法可以传递一个正则表达式作为参数，这样方法将会根据正则表达式，去拆分字符串
3、这个方法即使不指定全局匹配，也会全部拆分

search
1、搜索字符串中是否含有指定内容
2、搜索到指定内容，则会返回第一次出现的索引，否则返回-1
3、只会查找第一个，设置全局配置也没用

正则
1、创建一个正则表达式检查一个字符串是否含有aaa
var reg = /aaa/;
console.log(reg.test("abcd"))

2、量词：通过量词设置一个内容出现的次数
var reg = /a{3}/
console.log(reg.test("aaabc"));
-{n} 正好出现几次
量词只对它前边的内容起作用
reg = /(ab){3}/
reg = /ab{3}c/
reg = /ab{1,3}c/
-{m,n}出现 m-n次
`+` 至少一个，相当于{1,}
`*` 零个或多个,相当于{0,}
`?` 0个或者1个相当于{0,1}

reg = /ab*c/
reg = /ab?c/
检查一个字符串是否以e开头
reg = /^a/ 匹配开头的a
^ 表示开头
$表示结尾
reg = /a$/ // 匹配结尾的a

3、手机号规则:
13567890123(11位)
1、以1开头
2、第二位2-9任意数字
3、三位以后任意数字9个
var = phoneStr = "13567890123"
var phoneReg = /^1[3-9][0-9]{9}$/;
console.log(phoneReg.test(phonestr))

检查一个字符串是否含有.
var reg = /./
console.log(reg.test("!@#@#"))

. 表示任意字符
在正则表达式中使用\作为任意字符
\. 表示.
var reg = /\./
console.log(reg.test(b.))

\\ 表示 \
reg = /\\/;
console.log(reg.test("b.\\"))
reg = new RegExp("\.")
console.log(reg.test("b.\\"))
注意：使用构造函数时，由于参数是字符串，但是字符串中的`\`是转义字符，如果要使用\则需要使用`\\`来代替


\w,任意字母，数字,_[A-z0-9_]
\W,除了字母，数字,_ [^A-z0-9_]
\d,任意数字,[0-9]
\D,除了数字,[0-9]
\s,空格
\S,除了空格
\b,单词边界
\B,除了单词边界
创建一个正则表达式，检查一个字符串中是否含有单词child
reg = /child/;
console.log(reg.test("hello children"))
reg = /\bchild\b/
conso.leg(reg.test("hello.child ren"))
接收一个用户输入
var str = prompt("请输入你的用户名")
console.log(str)
去除掉字符串的空格
去除空格就是使用""来替换空格 		`str = str.replace(/\s/g,"")`
去除开头的空格
str = str.replace(/^\s/g,"")
var str = "     hello     ";
去除结尾的空格		`str = str.replace(/\s*$/,"")`
/\s$|\s*/g 匹配开头和结尾的空格 `str = str/replace(/\s*$|\s*/g,"")`
任意字母数字下划线   	`\w{3,}`
.任意字母数字下换线@   	`(\.\w)*@`
任意字母数字      		`[A-z0-9]+`
.任意字母(2-5) .任意字母(2-5) 	`(\.[A-z]{2,5}){1,2}`
var emaiReg = /\w{3,}(\.\w+)*@[A-z0-9]+(\.[A-z]{2,5}){1,2}/
var email = "abc@abc.com"
console.log(email:(reg.test(email)))


Dom,全程，document object model 文档对象模型
1、JS通过通过Dom来对html文档进行操作
2、文档，整个网页html文档对象
3、对象，网页中的每一个部分都转换为对象
4、模型，表示对象之间的关系，方便获取对象
5、节点，构成网页的最近本的组成部分，网页中每一部分都可以称为节点
6、标签，属性，文本，注释，整个文档都是一个节点
7、虽然都是节点，具体的类型不同
节点:Node-构成html文档最基本的单元
标签，元素节点,html文档中的html标签
属性，属性节点，元素的属性
文本，文本节点,html标签中的文本内容
文档，文档节点，整个HTML文档


<p id="pid"> this is a par </p>

1、id="pid",属性节点
2、this is par,文本节点
3、<p id="pid"> this is a par </p>,元素节点

浏览器为我们提供文本节点，window属性
1、可以在页面直接使用，文档节点代表的是整个网页
var btn = document.getElementById("btn")
修改按钮的文字
btn.innerHTML = "I' Button"


事件
1、文档或浏览器窗口中的交互
2、JavaScript与HTML之间的交互式通过事件实现的
3、可以为按钮的对应事件绑定处理函数的形式来响应事件，事件被触发时，其对应的函数将会被调用
eg:
var btn = document.getElementById("btn")
btn.onclick = function() {...};


浏览器在加载一个网页时，自上而下的顺序加载的
1、JS代码编写到页面的下部就是为了可以在页面加载完毕以后再执行JS代码
2、为window绑定一个onload事件,onload，页面加载完成之后才触发
window.onload = function() {...};



获取元素节点,通过document对象调用
1、getElementById()，通过id属性获取一个元素节点对象
2、getElementsByTagName(),通过标签名获取一组元素节点对象
3、getElementsByName()，通过name属性获取组元素节点对象
InnerHTML,用于获取元素内部的Html代码
1、对于自结束标签，这个属性没有意义
2、如果需要读取元素节点属性，直接使用元素,属性名
eg: 元素.id 元素.name 元素.value
注意:class 属性不能采用这种方式
读取class属性时需要使用元素className

InnerText
1、该属性可以获取到元素内部的文本内容
2、他的InnerHtml类似，不同的是它会自动将html去除

获取元素节点的子节点
通过具体的元素节点调用
1、getElementsByTagName(),方法返回当前节点的指定标签名后代节点
2、childNodes,属性表示当前节点的所有子节点
3、firstChild,属性表示当前节点的第一个子节点
4、lastchild,属性表示当前节点的最后一个子节点


获取父节点和兄弟节点
通过具体的节点调用
1、parentNode，属性表示当前节点的父节点
2、previoussibing,表示当亲节点的前一个兄弟节点
3、nextsibling,表示当前节点的后一个兄弟节点
function myclick(idStr,fun){
var btn = getElementByid(idstr)
btn.click = fun;
}


previousElementsibiling,获取前一个兄弟元素
IE8及以下不支持

childNodes，
1、属性会获取包括文本节点在的所有节点
2、根据Dom标签，标签间空白也会当成文本节点，
注意：在IE8及以下的浏览器中，不会讲空白文本当成子节点，所以该属性在IE8中会返回4个子节点元素而其他浏览器是9个

children,属性可以获取当前元素的所有子元素
firstElementchild，不支持IE8及以下的浏览器，如果需要兼容他们尽量不要使用



document.querySelector()
1、需要一个选择器的字符串作为参数，可以根据一个css选择器来查询一个元素节点对象
2、虽然IE8中没有getElementsByclassName(),也可以使用querySelector代替

document.queryselector()
1、和querySelector()用法类似，不同的是它会将符合条件的元素封装到一个数组中返回
2、即使符合条件的元素只有一个，它会返回数组


document.createElement()
1、创建一个元素节点对象
2、它需要一个标签名作为参数，将会根据该标签名创建元素节点对象
3、并将创建好的对象作为返回值返回

// 创建里元素节点
var li = document.createElement("li")
// 创建广州文本节点
var txt = document.createTextNode("广州")

// 将gzText设置li的子节点
appendchild()
1、向一个父节点中添加一个新的节点
2、用法，父节点.appendchild(子节点)
3、li.appendchild(gzText)
var city = document.getElementById("city")

// 将广州添加到city下
city.appendchild(li)

insertBefore()
1、可以在指定的子节点前插入新的子节点
2、语法：
	父节点.insertBefore(新节点，旧节点)；
city.insertBefore(li,bj)

replacechild()
1、可以使用指定的子节点替换已有的子节点
2、语法：父节点.replacechild(新节点，旧节点)

removechild()
1、可以删除一个子节点
2、语法：父节点.removechild(子节点)




点击超链接以后，超链接会跳转页面，这个是超链接的默认的行为，但是此时我们不希望
出现默认行为，可以通过响应函数的最后return false 来取消默认行为

通过js修改元素的样式
1、语法,元素.style.样式名= 样式值,
注意：如果css的样式名中含有`-`，这样名称在js中是不合法的比如
background-color需要将这种样式名修改为驼峰命名法，去掉 `-`
然后将 `-`后的字母大写
eg:
 border-top-width  ===== borderTopWidth

1、通过style属性设置和读取的都是内联样式，内联样式有较高的优先级，通过js修改的样式往往会立即显示
2、在样式里写important，则此时样式会有最高的优先级，即使通过js也不能覆盖该样式，此时将会导致js
修改样式失效，所以尽量不要为样式添加!important
3、当前元素没有设置样式，则获取它的默认值
4、currentStyle只有IE浏览器支持，其他的浏览器不支持
5、其他的浏览器中使用getcomputedstyle()来获取元素当前的样式，这个方法时window的方法，直接使用
eg: var obj = getcomputedStyle(box1,null),
1、返回一个对象
2、对象中封装了当前元素对应的样式，可以通过对象样式名来读取样式
3、如果获取的样式没有设置，则会获取到正式的值，而不是默认值
比如，没有设置width它不会获取到auto,而是一个长度
该方法不支持IE8及以下的浏览器


定义一个函数，用来获取指定元素的当前的样式

参数： obj 要获取样式的元素
      name 要获取的样式名


function getStyle(obj,name){

return getcomputedStyle(obj,null)[name];// IE8的方式
}


通过currentstyle和getcomputedStyle读取到的样式都是只读的，不能修改
如果要修改必须通过style属性

function getstyle(obj,name){
if(getcomputedstyle) {
// 正常浏览器的方式具有getcomputedStyle()方法
return getcomputedstyle(obj,null)[name]

} else {
// IE8的方式，没有getcomputedStyle()方法

return obj.currentstyle[name]

}
}


clientWidth,clientHeight
1、这两个属性可以获取元素的可见宽度和高度
2、一些属性都是不带px的返回都是一个数字，可以直接进行计算
3、获取元素的宽度和高度，包括内容区和内边距
4、属性都是只读的，不能修改



offsetWidth,offsetHeight
获取元素的整个的宽度和高度，包括内容区，内边距和边框

offsetparent
1、获取当前元素的定位父元素
2、获取到离当前元素最近的开启了定位的祖先元素
3、如果所有的祖先元素都没有开启定位则返回body

offetleft
1、当前元素相对于其定位父元素的水平偏移量
2、可以获取水平滚动条，滚动的距离
offsetTop
1、当前元素想多余其定位父元素的垂直偏移量
2、可以获取垂直滚动条，滚动的距离
当满足scrollHeight-scrollTop == clientHeight说明
垂直滚动条滚动到底了
当满足scrollWidth - scrollLeft == clientWidth说明
水平滚动条滚动到底了


当垂直滚动条滚动到底时，使表单项可用
onscroll,该事件会在元素的滚动条滚动时触发

window.onload = function() {
当垂直滚动条滚动到底时，使表单项可用
var info = document.getElementById("info")
info.onscroll = function() {
if(info.scrollHeight - info.scrollTop == info.clientHeight) {

// 滚动到底
disabled属性可以设置一个元素是否禁用，如果设置为true，则元素禁用，如果设置为false，则元素可用
}
}

}


onmousemove,该事件将会在鼠标在元素中移动时触发

事件对象
1、当时间的响应函数被触发时，浏览器每次都会讲一个事件对象作为实参传递进响应函数
2、A.onmusemove = function(event) {
alert(event);
}
3、按键被按下，鼠标滚轮的方向
4、clientx,可以获取鼠标指针的水平坐标
5、clientY,可以获取鼠标指针的垂直坐标
6、在IE8中响应函数被触发时，浏览器不会传递事件对象，
在IE8及以下的浏览器，将事件对象作为window对象的属性保存
event = event || window.event

pageX和pageY可以获取鼠标相对于当前页面的坐标，在IE8不支持


事件冒泡
1、所谓的冒泡指的就是，事件的向上传导，当后代的元素的事件被触发时
其祖先元素的相同事件也会被触发
2、在开发中大部分情况冒泡，都是有用的，如果不希望发生事件冒泡，
可以通过事件对象来取消冒泡,event.cancelBubble = true
取消冒泡
可以将事件对象的cancelBubble设置为true，即可取消冒泡


我们希望，只绑定一次事件，即可应用到多个元素上，即使元素是后添加的
我们可以尝试将其绑定给元素的共同祖先元素

事件委托
1、指将事件统一绑定给元素的共同祖先元素，这样当后代元素的事件被触发时，会一直冒跑到祖先元素，而通过祖先元素的响应函数来处理事件
2、事件委托是利用了冒泡，通过委派可以减少事件绑定的次数，提高程序的性能

u1.onclinck = function(event){
event = event || window.event;
}

target，指的是触发事件的对象

如果处罚对象使我们期望的元素则执行否则不执行
if(event.target.className == "link") {
alert("我是u1的响应函数");
}

使用对象.事件  = 函数的形式绑定响应函数，他只能同时为一个元素的事件绑定一个响应函数，不能绑定多个，
如果绑定了多个则后边会覆盖掉前面的

addEventListender()
1、为元素绑定响应函数
参数：
1、事件的字符串，不要on
2、回调函数，当事件触发时该函数会被调用
3、是否在捕获阶段触发事件，需要一个布尔值，一般都穿false
4、同时为一个元素的相同事件同时绑定多个响应函数，这样当时间被触发时，响应函数按照绑定顺序执行
5、不支持IE8及以下浏览器
6、addEventListener()中的this，是绑定事件对象
btn1.addEventListener("click",function(){
...
},false);

btn2.addEventListener("click",function(){
...
},false)


attachEvent()
1、在IE8中可以使用accachEvent()来绑定事件
参数:
1、事件的字符串，要on
2、为一个事件绑定多个处理函数，不同的是它是后绑定先执行，执行顺序和
addEventListener()相反
3、回调函数
btn.attachEvent("onclick",function(){
alert(1);
});
4、attachEvent()中的this,是window需要统一两个方法this


参数：
1、obj要绑定事件的对象
2、eventStr，事件的字符串
3、callback,回调函数
function bind(obj,eventStr,callback){
 /// 大部分浏览器兼容的方式
obj.addEventListener(eventStr,callback,false)
/// IE8及以下 "on" +
obj.attachEvent(eventStr,callback);
}

if(obj.addEventListener){
obj.addEventListener(EventStr,callback,false);
} else {

obj.attachEvent("on"+eventStr,callback)
}



事件的传播
1、微软公司认为事件应该是由内向外传播，也就是当事件触发时，应该先触发当前元素的事件，然后在
向当前元素的祖先元素上传播-----事件应该在冒泡阶段执行
2、网景公司认为事件应该是由外向内传播的
3、W3C综合了两个公司的方案，将事件传播分为三个阶段

3.1、捕获阶段，在捕获阶段时，从最外层的祖先元素，向目标元素进行事件的捕获，
但是默认此时不会触发事件
3.2、目标阶段，事件捕获到目标元素，捕获结束，开始在目标元素触发事件
3.3、冒泡阶段，事件从目标元素向他的祖先元素传递，一次出发祖先元素的事件
3.4、IE8及以下的浏览器中没有捕获阶段
	----------------------------------|
捕获阶段	| |----------------------------|  |			     	  
--------| |------>  目标阶段	       |  |	  
	| |----------------------------|  |	事件冒泡			  
	| |		目标阶段	-------|--|------------->	  
	| |----------------------------|  |				  
	| |			       |  |	  
	| |----------------------------|  |				 
	|_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _|


如果希望在捕获阶段就出发事件，可以将addEventListener()的第三个参数设置为true，
一般情况下我们不会希望在捕获阶段触发事件，一般情况下我们不会希望在捕获阶段触发事件，
所以这个参数一般都是false


拖拽box1元素
拖拽的流程
onmousedown,鼠标在拖拽元素上按下
onmousemove,鼠标移动时被拖拽元素跟随鼠标移动
onmouseup,鼠标松开时，被拖拽元素固定在当前位置

var box1 = document.getElementById("box1")
box1.mousedown = function() {

document.mousemove = function(event){
event = event||window.event;
var left = event.clientX;
var top = event.clientY;
//修改box1的位置
box1.style.left = left + "px";
box1.style.top = top + "px";
}
box1.onmouseup = function(){

// 当鼠标松开时，被拖拽元素固定在当前位置 onmouseup
取消document的onmousemove事件
document.onmousemove = null;
document.onmousedown = null;
}
return false;
}

注意：
1、当我们拖拽一个网页中的内容时，浏览器会默认去搜索引擎中搜索内容，此时会导致拖拽功能的异常，
这个是浏览器提供的默认行为，如果不希望发生这个行为，则可以通过return false来取消默认行为
2、但是对IE8不起作用


btn.setcapture()
1、调用一个元素的setcapture方法以后，这个元素将会把下一次所有的鼠标按下相关的事件捕获到自身上
2、只有IE支持，但是在火狐中调用时不会报错，而如果使用chrome调用，会报错

当鼠标松开时，取消对事件的捕获 
box1.releasecapture && box1.releasecapture()

提取一个专门用来设置拖拽的函数
function drag(box1){
...
}
当鼠标滚轮向下滚动时，box1边长，向上滚动，box1变短

onmousewheel,鼠标滚轮滚动的事件，会在滚轮滚动时触发，但是火狐不支持该属性，在火狐中需要使用dommouseScroll
来绑定滚动 box1.onmousewheel = function() {};
addEventListener()
1、取消默认行为使用event.preventDefault(),IE8不支持


1、onkeydown,按键被按下，如果一直按着某个按键不松手，则事件会一直触发
2、当onkeydown连续触发时，第一次和第二次之间稍微长一点，其他的会非常的快，这种设计是为了防止误操作发生
3、键盘事件一般都会绑定给一些可以获取到焦点的对象或者是document
4、document.onkeydown = function{
// 键盘被按下
}
document.onkeyup = function{
// 按键被按下了
}

document.onkeyup = function{
// 按键松开了
}

document.onkeydown = function{
event = event||window.event;
可以通过keyCode来获取按键的编码。通过它可以判断哪个按键按下
console.log(event.keycode);
}

判断一个y是否被按下，判断y和ctrl是否同时被按下
if(event.keyCode === 89){
console.log("y被按下了");
}
if(event.keycode ==== 17){
console.log("ctrl被按下")
}


除了keycode,事件对象中提供了几个属性
Altkey
Ctrkey
Shiftkey
这个三个用来判断alt ctrl和shift是否被按下，如果按下则返回true,否则返回false

var input = document.getElementByTagName("input")[0]
input.onkeydown = function(event){
event = event || window.event;
console.log(event.keycode);
}

数字48-57
是文本框中不能输入数字
if(event.keycode >= 48 && event.keycode <= 57){
return false;
}


Bom 
1、浏览器对象模型
2、Bom可以使用我们通过js来操作浏览器
3、在Bom中为我们提供了一组对象，用来完成对浏览器的操作

window,代表的是整个浏览器的窗口
Navigator,代表的时当前浏览器的信息，通过该对象可以来识别不同的浏览器,
由于历史原因大部分属性都已经不能帮助我们识别浏览器了，一般我们只会使用userAgent来判断浏览器的信息
Location,代表当前浏览器的地址栏信息，通过location可以获取地址栏信息或者操作浏览器跳转页面
History,代表浏览器的历史记录可以通过该对象来操作浏览器的历史记录，由于隐藏原因该对象不能获取到具体的历史记录
只能操作浏览器向前或向后翻页，而且该操作只能档次访问时有效
Screen,屏幕信息，通过该对象可以获取到用户的显示器的相关信息

这些Bom对象在浏览器中都是作为window对象属性保存的
可以通过window对象来使用，也可以直接使用

userAgent时一个字符串，这个字符串中包含有用来描述浏览器信息的内容，不同的浏览器会有不同的userAgent

console.log(navigator.userAgent)
var ua = navigator.userAgent;
console.log(ua)
if(/firefox/i.test(ua)){
alert("你是火狐");
} else if (/chrome/i.test(ua)){
alert("你是chrome");
}

如果通过userAgent不能判断，还可以通过一些浏览器中特有的对象，来判断浏览器的信息
比如:ActivexObject
if(window.activeObject){
alert("你是IE，我已经抓住你了...");
} else{
alert("你不是IE...");
}






























