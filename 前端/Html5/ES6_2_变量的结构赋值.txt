1.数组的解构赋值
基本用法
ES6允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构
以前，为变量赋值，只能直接指定值。
let a = 1;
let b = 2;
let c = 3;
ES6允许携程下面这样
let [a,b,c] = [1,2,3]
上面代码表示，可以从数组中提取值，按照对应位置，对变量赋值
本质上，这种写法属于‘模式匹配’，只要等号两边的模式相同，左边的变量就会被赋予对应的值。下面是一些使用嵌套数组进行结构的例子。
let [foo,[[bar],[barz]]] = [1,[[2],3]];
foo // 1
bar // 2
baz // 3
let [,,third] = ['foo','bar','baz'];
third // ‘baz’
let [x,y] = [1,2,3];
x // 1
y // 3
let [head,...tail] = [1,2,3,4];
head // 1
tail // [2,3,4]
let [x,y,...z] = ['a'];
x// 'a'
y// undefined
z// []
如果结构不成功,变量的值就等于undefined。
let[foo] = [];
let [bar,foo] = [1];
以上两种情况都属于解构不成功，foo的值都会等于undefined。
另一种情况是不完全解构，即等号左边的模式，只匹配一部分的等号右边的数组，这种情况下，解构依然可以成功。
let [x, y] = [1, 2, 3];
x // 1
y // 2

let [a, [b], d] = [1, [2, 3], 4];
a // 1
b // 2
d // 4

上面两个例子，都属于不完全解构，但是可以成功。
如果等号的右边不是数组，（或者严格地说，不是可遍历的结构，参见《Iterator》-章），那么将会报错。
// 报错
let [foo] = 1;
let [foo] = false;
let [foo] = NaN;
let [foo] = undefined;
let [foo] = null;
let [foo] = {};
上面的语句都会报错，因为等号右边的值，要么转为对象以后不具备Iterator接口（前5个表达式），要么本身就不具备Iterator接口（最后一个表达式）。
对于Set结构，也可以使用数组的解构赋值
let [x, y, z] = new Set(['a', 'b', 'c']);
x // "a"

事实上，只要某种数据结构具有Iterator接口，都可以采用数组形式的解构赋值。
function* fibs() {
  let a = 0;
  let b = 1;
  while (true) {
    yield a;
    [a, b] = [b, a + b];
  }
}

let [first, second, third, fourth, fifth, sixth] = fibs();
sixth // 5
上面代码中，fibs是一个Generator函数（参见《Generator函数》一章），原生具有Iterator接口。解构赋值会依次从这个接口获取值。

默认值
解构赋值允许指定默认值。
let [foo = true] = [];
foo // true

let [x, y = 'b'] = ['a']; // x='a', y='b'
let [x, y = 'b'] = ['a', undefined]; // x='a', y='b'
注意，ES6内部使用严格相等运算符（===）判断一个位置是否相等。所以，只有当前一个数组成员严格等于undefined,默认值才会生效。
let [x = 1] = [undefined];
x // 1

let [x = 1] = [null];
x // null
上面的代码中，如果有数组成员null，默认值就不会生效，因为null不严格等于undefined。
如果默认值是一个表达式，那么这个表达式式惰性求值的，即只有在用到的时候，才会求值。
function f() {
  console.log('aaa');
}

let [x = f()] = [1];

上面的代码中，因为x能取到值，所以函数f根本不会执行，上面的代码其实等价于下面的代码
let x;
if ([1][0] === undefined) {
  x = f();
} else {
  x = [1][0];
}
默认值可以引用解构赋值的其他变量，该变量必须已经声明。
let [x = 1, y = x] = [];     // x=1; y=1
let [x = 1, y = x] = [2];    // x=2; y=2
let [x = 1, y = x] = [1, 2]; // x=1; y=2
let [x = y, y = 1] = [];     // ReferenceError: y is not defined
上面最后一个表达式之所以会报错，是因为x用y做默认值时，y还没有声明。
2.对象的解析赋值
解构不仅仅可以拥有数组，还可以用于对象。
let { foo, bar } = { foo: "aaa", bar: "bbb" };
foo // "aaa"
bar // "bbb"
对象的解构于数组有一个重要的不同，数组的元素是按序列排序的，变量的取值由于它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。
let {bar,foo} = {foo:"aaa",bar:"bbb"};
foo// "aaa"
bar// "bbb"
let {baz} = {foo:"aaa",bar:"bbb"};
baz // undefined
上面代码的第一个例子，等号左边的两个变量的次序，与等号右边两个同名属性的次序不一致，但是对取值完全没有影响，第二个例子的变量没有对应的同名属性，导致取不到值，最后等于undefined。
如果变量名与属性名不一致，必须携程下面这样。
let { foo: baz } = { foo: 'aaa', bar: 'bbb' };
baz // "aaa"

let obj = { first: 'hello', last: 'world' };
let { first: f, last: l } = obj;
f // 'hello'
l // 'world'

这实际上说明，对象的解构赋值是下面形式的简写（参见《丢向的扩展》一章）。
let { foo: foo, bar: bar } = { foo: "aaa", bar: "bbb" };

也即是是说对象的解构赋值的内部机制，是先找到同名属性，然后在赋给属性，然后在赋给对应的变量。
真正被赋值的是后者，而不是前者。

let { foo: baz } = { foo: "aaa", bar: "bbb" };
baz // "aaa"
foo // error: foo is not defined
上面代码中，foo是匹配模式，把这才是变量，真正被赋值的是变量baz，而不是模式foo。
与数组一样，解构也是可以用于嵌套解构的对象。
let obj = {
  p: [
    'Hello',
    { y: 'World' }
  ]
};

let { p: [x, { y }] } = obj;
x // "Hello"
y // "World"

注意，这时p是模式，不是变量，因此不会被赋值。如果p也要作为变量赋值，可以写成下面这样。
let obj = {
  p: [
    'Hello',
    { y: 'World' }
  ]
};

let { p, p: [x, { y }] } = obj;
x // "Hello"
y // "World"
p // ["Hello", {y: "World"}]
下面是另一个例子。
const node = {
  loc: {
    start: {
      line: 1,
      column: 5
    }
  }
};

let { loc, loc: { start }, loc: { start: { line }} } = node;
line // 1
loc  // Object {start: Object}
start // Object {line: 1, column: 5}
上面代码有三次解构赋值，分别是对loc，start，line三个属性的解构赋值。注意，最后一次对line属性的解构赋值之中，只对line变量，loc和start都是模式，不是变量。
下面是嵌套之的例子。
let obj = {};
let arr = [];

({ foo: obj.prop, bar: arr[0] } = { foo: 123, bar: true });

obj // {prop:123}
arr // [true]
对象的解构也可以指定默认值。
var {x = 3} = {};
x // 3

var {x, y = 5} = {x: 1};
x // 1
y // 5

var {x: y = 3} = {};
y // 3

var {x: y = 3} = {x: 5};
y // 5

var { message: msg = 'Something went wrong' } = {};
msg // "Something went wrong"

默认值生效的条件是，对象的属性值严格等于undefined。

var {x = 3} = {x: undefined};
x // 3

var {x = 3} = {x: null};
x // null
上面代码中，属性x等于null，因为null与undefined不严格相等，所以是个有效的赋值，导致默认值3不会生效。
如果解构失败，变量的值等于undefined。
let {foo} = {bar: 'baz'};
foo // undefined
如果解构模式是嵌套的对象，而且子对象所在的父属性不存在，那么将会报错。

// 报错
let {foo: {bar}} = {baz: 'baz'};
上面代码中，等号左边对象的foo属性，对应一个子对象，该子对象的bar属性，解构时会报错。原因很简单，因为foo这时等于undefined,在取子属性就会报错，请看下面的代码。
let _tmp = {baz: 'baz'};
_tmp.foo.bar // 报错
如果要讲一个已经声明的变量用于解构赋值，必须非常小心。
// 错误的写法
let x;
{x} = {x: 1};
// SyntaxError: syntax error
上面代码的写法会发生错误，因为JavaScript引擎会将{x}理解成为一个代码块，因为发生语法错误，只有不讲大括号写在行首，避免JavaScript将其解释为代码块，才能解决这个问题。

// 正确的写法
let x;
({x} = {x: 1});
上面代码将整个解构赋值语句，放在一个括号里面，就可以正确执行，关于括号与解析赋值的关系，参见下文。
解构赋值允许等号左边的模式之中，不放置任何变量名，因此，可以写出非常古怪的赋值表达式。
({} = [true, false]);
({} = 'abc');
({} = []);
上面的表达式虽然毫无意义，但是语法是合理的，可以执行。
对象的解构赋值，可以方便地将现有对象的方法，赋值到整个变量。
let { log, sin, cos } = Math;
上面代码将Math对象的对数，正弦，余弦三个方法，赋值到对应的变量上，使用起来就会方便很多。
由于数组本质就是特殊的对象，因此可以对数组进行对象属性的解构。
let arr = [1, 2, 3];
let {0 : first, [arr.length - 1] : last} = arr;
first // 1
last // 3
上面代码对数组进行对象解构。数组arr的0键对应的值是1，[arr.length - 1]就是2键，对应的值是3。方括号，这种写法，属于“属性名表达式”(参见《对象的扩展一章》)。

3字符串的解构赋值
字符串也可以解构赋值。这时因为此时，字符串被转换成了一个类似数组的对象。
const [a, b, c, d, e] = 'hello';
a // "h"
b // "e"
c // "l"
d // "l"
e // "o"
类似数组的对象都有一个length属性，因为还可以对这个属性解构赋值。
let {length : len} = 'hello';
len // 5

4.数值和布尔值得解构赋值
解构赋值时，如果等号右边是数值和布尔值，则会先转为对象。
let {toString: s} = 123;
s === Number.prototype.toString // true

let {toString: s} = true;
s === Boolean.prototype.toString // true

上面代码中，数值和布尔值的包装对象都有toString属性，因此变量s都能取到值。
解构赋值的规则是，只要等号右边的值不是对象和数组，就现将其转换为对象。由于undefined和null无法转为对象，所以对他们进行解构赋值，都会报错。
let { prop: x } = undefined; // TypeError
let { prop: y } = null; // TypeError

5函数参数的解构赋值
函数的参数也可以使用解构赋值。
function add([x, y]){
  return x + y;
}

add([1, 2]); // 3
上面的代码中，函数add的参数表面上是一个数组，但是传入参数的那一刻，数组参数就被解构成变量x和y。对于函数内部的代码来说，他们能感受到参数就是x和y。
下面是另一个例子。
[[1, 2], [3, 4]].map(([a, b]) => a + b);
// [ 3, 7 ]
函数参数的解构也可以使用默认值。
function move({x = 0, y = 0} = {}) {
  return [x, y];
}

move({x: 3, y: 8}); // [3, 8]
move({x: 3}); // [3, 0]
move({}); // [0, 0]
move(); // [0, 0]
上面代码中，函数move的参数是一个对象，通过对这个对象进行解构，得到变量x和y的值。如果解构失败，x和y等于默认值。
注意，下面的写法会得到不一样的结果。
function move({x, y} = { x: 0, y: 0 }) {
  return [x, y];
}

move({x: 3, y: 8}); // [3, 8]
move({x: 3}); // [3, undefined]
move({}); // [undefined, undefined]
move(); // [0, 0]
上面代码是为函数move的参数指定默认值，而不是变量x和y指定默认值，所以会得到与前一种写法不同的结果。

undefined就会触发函数参数的默认值。
[1, undefined, 3].map((x = 'yes') => x);
// [ 1, 'yes', 3 ]

6.圆括号问题
解构赋值虽然很方便，但是解构起来并不容易，对于编译器来说，一个式子到底是模式还是表达式，没有办法从一开始就知道，必须解析到（或解析不到）括号才能知道。
由此带来的问题是，如果模式中出现圆括号怎么处理。ES6的规则是，只要有可能导致解构的歧义，就不得使用圆括号。
但是，这条规则实际上不那么容易辨别，处理起来相当麻烦，因此，建议只要有可能，就不要在模式中国放置圆括号
不能使用圆括号的情况
以下三种解析赋值不得使用圆括号。
（1）.变量声明语句
// 全部报错
let [(a)] = [1];

let {x: (c)} = {};
let ({x: c}) = {};
let {(x: c)} = {};
let {(x): c} = {};

let { o: ({ p: p }) } = { o: { p: 2 } };
上面6个语句都会报错，因为他们都是变量声明语句，模式不能使用圆括号。
（2）.函数参数
函数参数也属于变量声明，因此不能带有圆括号。

// 报错
function f([(z)]) { return z; }
// 报错
function f([z,(x)]) { return x; }
（3）.赋值语句的模式
// 全部报错
({ p: a }) = { p: 42 };
([a]) = [5];
上面代码将整个模式放在圆括号之中，导致报错。
// 报错
[({ p: a }), { x: c }] = [{}, {}];
上面代码将一部分模式放在圆括号之中，导致报错。
可以使用圆括号的情况
可以使用圆括号的情况只有一中：赋值语句的非模式部分，可以使用圆括号。

[(b)] = [3]; // 正确
({ p: (d) } = {}); // 正确
[(parseInt.prop)] = [3]; // 正确
上面三行语句都可以正确执行，因为首先他们都是赋值语句，而不是声明语句；其次他们的圆括号都不属于模式的一部分。一行语句中，模式是取数组的第一个成员，跟圆括号无关，第二行语句中，模式是p，而不是d；第三行语句与第一行语句的性质一致。

7.用途
变量的解构赋值用途很多。
（1）交换变量的值
let x = 1;
let y = 2;

[x, y] = [y, x];
上面代码交换变量x和y的值，这样的写法不仅简介，而且易读，语义非常清晰。
（2）从函数返回多个值
函数只能返回一个值，如果要返回多个值，只能将他们放在数组对象里面返回，有了解构赋值，取出这些值就非常方便。
// 返回一个数组

function example() {
  return [1, 2, 3];
}
let [a, b, c] = example();

// 返回一个对象

function example() {
  return {
    foo: 1,
    bar: 2
  };
}
let { foo, bar } = example();
（3）函数参数的定义
解构赋值可以方便地将一组参数与变量名对应起来
// 参数是一组有次序的值
function f([x, y, z]) { ... }
f([1, 2, 3]);

// 参数是一组无次序的值
function f({x, y, z}) { ... }
f({z: 3, y: 2, x: 1});
（4）提取JSON数据
解构赋值对提取JSON对象中的数据，尤其有用。
let jsonData = {
  id: 42,
  status: "OK",
  data: [867, 5309]
};

let { id, status, data: number } = jsonData;

console.log(id, status, number);
// 42, "OK", [867, 5309]

上面代码可以快速提取JSON数据的值。
（5）函数参数的默认值
jQuery.ajax = function (url, {
  async = true,
  beforeSend = function () {},
  cache = true,
  complete = function () {},
  crossDomain = false,
  global = true,
  // ... more config
} = {}) {
  // ... do stuff
};
指定参数的默认值，就避免了在函数体内部在写var foo = config.foo||'default foo';这样的语句。
(6)遍历Map结构
任何部署了Iterator接口的对象，都可以使用for...of循环遍历，Map结构原生支持Iterator接口，配合变量的解构赋值，获取键名和键值就非常方便。
const map = new Map();
map.set('first', 'hello');
map.set('second', 'world');

for (let [key, value] of map) {
  console.log(key + " is " + value);
}
// first is hello
// second is world
如果只想获取键名，或者只想获取键值，可以写成下面这样。
// 获取键名
for (let [key] of map) {
  // ...
}

// 获取键值
for (let [,value] of map) {
  // ...
}
(7) 输入模块的指定方法
加载模块时，往往需要指定输入那些方法，解构赋值使得输入语句非常清晰。
const { SourceMapConsumer, SourceNode } = require("source-map");
