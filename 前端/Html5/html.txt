
开发工具
1、IDE
2、hbuilder


html语法规则:
1、不区分大小写
2、注释不能嵌套
3、标签结构完整，成对或自结束的标签
浏览器尽最大努力正确的解析页面中所有的不符合语法规范的内容


块元素
div、h1、 h2、h3...
div:
1、相当于一个空页面，用来页面布局
2、默认没有样式

内联元素：只占自身大小，不会占用一行，也称为行内元素
span、a、img、iframe、
1、文本设置样式
2、一般是块元素包含内联元素
3、a元素除了自身后可以包含任何元素；p元素不能包含任何其他的块元素，称为段落标签
4、不能设置width,height
5、内联元素可以设置水平和垂直方向的内边距，不会影响页面的布局
6、内联元素可以设置边框，垂直的边框不会影响到页面的布局
7、为右边的元素设置一个左外边距，水平方向的外边距不会重叠，而是求和
8、内联元素不支持垂直外边距


display
1、inline,可以讲一个元素作为内联元素显示
2、block，可以讲一个元素设置块元素显示
3、inline-block，行内块元素，可以将一个元素既可以设置宽高，右不会独占一行
4、none,隐藏不显示元素，并且元素不会继续显示占位

visibility
1、visible,默认值，元素默认会在页面显示
2、hidden,元素会隐藏不显示，位置会保持


overflow
1、visible,默认值
2、hidden,溢出的内容，会被修剪，不会显示
3、scroll,添加水平和垂直双方向的滚动条
4、auto,根据需要自动添加滚动条


hr标签在页面生成一条水平线
br标签换行标签
在hmtl中，一些如`<`，`>`特殊字符不能直接使用需要使用一些特殊的符号来表示特殊的字符，这些特殊字符我们称为实体转义字符eg:`<`、`>`、`空格`、`版权符号`等


搜索引擎检索页面，检索页面中的关键字
meta:
1、设置页面的关键字
2、重定向
3、制定网页的描述

超链接：可以使我们从一个页面跳转到另一个页面
a属性：
1、target,指定打开连接的位置
2、_self,当前页面打开
3、_block,新的页面打开
4、可以设置一个内联框架name属性值，将会在指定的内联框架中打开
eg:<a href='mailto:xxx@xx.com'>联系我们</a> 打开邮箱


link:
visited:已经浏览的
hover:鼠标移入
active:正在点击

em、strong
em:
1、表示一段内容的重点
2、语气上的强调
3、浏览器中默认使用斜体显示

strong:
1、强调的是内容
2、比em更强烈
3、默认使用粗体显示

i、b（单纯的显示粗体或者斜体）
i：标签内容斜体显示
b：标签内容粗体显示

small:
1、比父元素中的文字小写，用small标签来表示细则一类的内容
2、合同小字、版权声明

cite:
网页中的书名号
q:
1、表示一个短的引用
2、浏览器默认加上引号
eg:子曰:<q>学而时习之不亦说乎</q>

blockqute:
1、表示一个常引用
eg:<blockqute>有朋自远放来<blockqute/>

sup、sub
sup:
1、设置上标
eg:<2>2<sup>2</sup></p>

sub:
1、设置下标

del:
1、表示一个删除的内容
2、标签的内容会自动添加删除线

ins
1、表示一个插入的内容
2、会自动添加下划线


pre:
1、预格式标签
2、将页面代码格式保存下来

code:
1、用来表示代码
2、结合pre和code表示一段代码



html列表有三种列表
1、无序列表
2、有序列表
3、定义列表
ul、ol、dl结合li组成列表，有序列表和无序列表可以相互嵌套
ul:
1、通过type可以修改无序列表的项目符号
2、去掉项目符号ul{list-style:none;}
eg:<ul><li>、、</li><li>、、</li> </ul>

ol:
1、有序列表
2、type属性可以设置序号的类型
3、块元素

dl:
1、定义一些词汇或内容
2、dl定义列表
<dl><dt></dt><dt></dt></dl>

em:
1、和百分比类似
2、1em = 1font-size
3、当字体大小发生改变时，em也会随之改变
4、设置字体先关的样式时，经常使用em


text-transform:
1、uppercase,大写
2、lowercase,小写
3、capitalize,首写字母
4、none,正常

text-decoration:
1、none，默认不添加任何修饰,可以去除超链接的下划线
2、underline,文本下划线
3、overline，文本上划线
4、line-through,穿过文本的下划线
5、letter-spcing,可以指定字符间距
6、word-spacing,可以指定单词间距

text-align:
1、用于设置文本对齐方式
2、left
3、right
5、center
6、justify,连段对齐，通过调整文本之间的空格的大小，来达到一个两端对齐的目的


text-indent
1、用来设置首行缩进
2、px，em +会自动向右侧缩进指定内容
3、-向左移动指定像素

border-width、边框宽度
border-color、变宽颜色
border-style、样式

width:上右下左；上`左右`下;`上下` `左右`；一个值4个都是该值


用来设置4边的宽度
1、border-top-width
2、border-right-width
3、border-bottom-width
4、border-left-width

设置边框的颜色
border-color:
1、r y o b
2、r y o
3、r y
4、r

设置边框的样式
border-style:
1、none
2、solid
3、dotted

四个边框的样式
border-left-style
border-right-style
border-top-style
border-bottom-style

内边距，盒子的内容区与盒子边框之间距离，一共有四个方向的内边距
padding-top
padding-right
padding-left
padding-bottom
1、内边距会影响盒子的可见框的大小，元素的背景会延伸到内边距
2、盒子的大小由内容区、内边距和边框共同决定
3、盒子可见宽度：border-left-width + padding-left-width + padding-right-width + border-right-width



外边框：当前盒子与其他盒子之间的距离，他不会影响可见框的大小而是影响到位置
盒子有四个方向的外边距
margin-top
margin-right
margin-left
margin-bottom
页面元素默认是靠左靠上摆放的

marin
1、可以设置auto,一般只设置给水平向的margin，水平居中需要左右都设置为auto




垂直外边距重叠
1、兄弟元素之间的相邻外边距会取最大值而不是取和
2、父子元素的垂直外边距相邻了，则子元素的外边距会设置给父元素
3、* {marign:0,padding:0;}，清除浏览器的默认样式



文档流
1、文档流处在网页的最下层，也表示的是一个页面中的位置
2、创建的元素默认都处在文档流中

元素在文档流中的特点
块元素：
1、块元素在文档流中独占一行，默认自上而下排列
2、块元素在文档流中默认宽度默认是父100%
3、块元素在文档流中的高度默认被内容撑开
内联元素：
1、内联元素在文档流中只占自身大小，默认自左向右排列如果一行不足，则换行继续
2、宽度和高度默认被内容撑开

当元素的宽度的值为auto时，此事指定内边距不会影响，可见框的大小而是会自动修改宽度，以适应内边距


浮动：
1、块元素在文档流中垂直排列，可以通过脱离文档流的方法是元素水平排列
float使元素浮动，脱离文档流
1、none,默认值
2、left，元素脱离文档流，向网页左侧浮动
3、right，元素脱离文档流，向网页右侧浮动
4、当为一个元素设置浮动以后，元素会立即脱离文档流，下边的元素会立即向上移动。
5、上边没有浮动的块元素，浮动的元素不会超过块元素，浮动元素的元素不会超过他上边的兄弟元素，最多一边齐
6、浮动元素不会盖住文字，文字会自动环绕在浮动元素的周围
7、块元素脱离文档流后，高和宽都被内容撑开


内联元素脱离文档流以后会变成块元素


父元素的高度塌陷
1、父元素的高度是子元素撑起来的
2、子元素设置浮动以后，导致子元素无法撑起父元素的高度
3、子元素向上移动，页面出现混乱


BFC
1、默认是关闭，可以设置打开或者关闭
特点
1、父元素垂直外边距不会和子元素重叠
2、开启BFC的元素不会被浮动元素所覆盖
3、开启BFC的元素可以包含浮动的子元素

开启BFC
1、设置元素浮动，虽然可以撑开父元素，但是会导致父元素宽度丢失，不能解决问题
2、设置元素绝对定位
3、设置元素为inline-block，可以解决问题，但是会导致宽度丢失，不推荐使用这种方式
4、将元素的overflow设置为一个非visible得值
推荐方式：
1、将overflow设置为hidden是副作用最小的开启BFC的方式。在IE6及以下的浏览器中不支持BFC，可以用HasLayout来解决该问题
2、可以使用副作用最小的,直接讲元素的Zoom设置为1即可
3、zoom，只在IE中支持，其他浏览器不支持
4、zoom表示放大的意思，后边跟着数值，写几讲元素放大几倍
5、zoom：1表示不放大，但是可以开启HasLayout
6、在IE6中，为元素指定宽度，则默认开启HasLayout


clear
1、由于受到box1浮动的影响，box2整体向上移动
2、可以清除掉其他元素的浮动对当前元素产生的影响
3、none,默认值，不清楚浮动
4、left清除左侧浮动元素对当前元素的影响
5、right清除右侧浮动元素对当前元素的影响
6、both清除两侧浮动元素对当前元素的影响


解决高度塌陷方案二

1、可以直接在高度塌陷的父元素的最后，添加一个空白的div，由于这个div并没有浮动，所以他是可以撑开父元素的高度，然后
在对其进行清除浮动，这样可以通过这个空白的div来撑开父元素的高度，基本没有副作用。
2、通过after伪类，选中box1的后边box:after{content:"";display:block;clear:both}
这样做和添加一个div的原理一样，可以达到一个相同的效果，而且不会再页面中添加多余的div，最推荐使用的方式。




定位position
1、通过定位把元素摆放在任意位置
2、static,默认值，元素没有开启定位
3、relative,开启元素的相对定位
4、absolute,开启元素的绝对定位
5、fixed，开启元素的固定定位，也是相对定位的一种


relative
1、开启后不设置偏移量，元素不会发生任何变化
2、是相对于元素在文档流中的原来的位置进行定位
3、相对定位的元素不会脱离文档流
4、使元素提升一个层级
5、相对定位不会改变元素的性质，块还是块，内联还是内联
6、可以通过left,right,top,bottom四个属性来设置元素的偏移量
7、left元素相对于其定位位置的左偏移量 
8、right元素相对于其定位位置的右偏移量
9、top元素相对于其定位的上偏移量
10、bottom相对于其定位的下偏移量


absolute绝对定位
1、开启绝对定位，会使元素脱离文档流
2、开启后不设置偏移量，元素不会发生任何变化
3、相对于离他最近的开启了定位的祖先元素进行定位的
4、祖先元素没有开启定位，则相当于浏览器窗口进行定位
5、一般，开启子元素绝对定位都会开启父元素的相对定位
6、提升一个层级
7、绝对定位会改变元素的性质，内联元素变成块元素，块元素的宽和高都默认被内容撑开

fixed:固定定位

1、特殊的绝对定位，特点大部分和绝对定位一样
2、不同点，固定定位永远是相对于浏览器窗口进行定位
3、固定浏览器窗口某个位置，不会随滚动条滚动
4、IE6不支持固定定位

1、如果定位元素的层级是一样的，则下边的元素会盖住上边的
2、通过z-index属性设置层级
3、层级越高越优先显示
4、z-index：1,100,999....
5、没有开启定位的元素不能使用z-index
6、staic默认值，没有定位，元素出现在正常流中，忽略top，bottom，left，right，或者z-index声明


opcity
1、设置元素的透明背景
2、0~1之间的值
3、0表示完全透明
4、1表示完全不透明
5、0.5表示不透明
6、在IE8及以下的浏览器不支持
7、IE8及以下的浏览器需要使用如下属性代替,filter:alphacopacity透明度，透明度需要一个0~100之间的值
这种方式支持IE6，但是这种效果在IE fester无法测试


设置背景样式
1、使用background-image来设置背景图片
2、如果背景图片和元素大小一样，则会将背景图全部显示
3、background-image:url()
4、如果背景图片小于元素大小，则会默认将背景图片平铺以充满元素
5、设置背景还可以设置背景颜色
6、background-repat:
repeate,默认值，背景图片会双方向重复（平铺）。
no-repeat,不重复，有多大就显示多大
repeat-x,背景图片沿水平方向重复
repeat-y,背景图片沿垂直方向重复
7、背景图片默认是贴着元素的左上角显示
8、通过background-position可以调整背景图片在元素的位置
该属性可以使用top,right,left,bottom,center中的两个值来指定背景图片的位置
top left 左上
bottom right 右下
background-position:top left
9、可以指定两个偏移量，第一个值是水平偏移量，第二个垂直偏移量，正值右移动，下移动

background-attachment
1、用来设置背景图片是否随着页面一起滚动
2、scroll,默认值，背景图片随着窗口滚动
3、fixed，背景图片会固定在某一个位置，不随页面滚动
4、背景图片定位永远相当于浏览器的窗口


雪碧图
1、将多个图片整合为一张图片里，浏览器只需要发送一次请求，可以同时加载多个图片，提高访问效率，提高了用户体验
2、将多个图片整合为一张图片，减少了图片的总的大小，提高了请求的速度，增加了用户体验

background
1、通过该属性可以同时设置所有背景相关的样式，没有顺序的要求，也没有数量的要求，不写的样式就使用默认值
2、background:#bfc url() center center no-repeat fixed


表格
1、课程表，银行账单。
2、table,tr表格中的一行，有几行就有几个tr
3、tr中使用td来创建单元格，有几个单元格就有几个td
4、colspan，横向的合并单元格<td colspan="2">D3</td>
5、
<table>
<tr>//行
<td>D1</td>//列
<td>D2</td>//列
</tr>
</table>
6、rowspan:用来设置纵向的合并单元格
7、table和td边框之间默认有一个距离,通过border-spacing属性可以设置这个距离
8、border-collapse:collapse,可以用来设置表格的边框合并，如果设置了边框的合并，
则border-spacing自动失效
9、th标签，表示表头的内容，用法和td一样，不同他会有默认效果
10、设置隔行变色tr:nth-child(even){background-color:#bfa;}
even:偶数；odd:奇数；
11、tr:hover{backgroud-color:#bfa;}，鼠标移入到tr以后，改变颜色
12、thead表头，tbody表格主体，tfoot表格底部，区分表格的不同部分，
是table的子标签，需要直接写在table中tr需要些在这些标签当中
eg:
<thead>
<tr><th>日期</th>th>收入</th></tr>
</thead>
<thead>
<tr><td>10.24</td><td>10.24</td></tr>
</thead>
<tfoot>
<tr><td> </td><td> </td></tr>
</tfoot>
13、thead中的内容，永远会显示在表格的头部，
tfoot中的内容永远会显示在表格的尾部，
tbody中的内容永远会显示在表格的中部

14、表格列数由td最多的那行决定，表格是可以嵌套，可以在td中在放置一个表格
<table border="1" width="100%">
	<tr height="100%">
		<td colspan="2"> </td>
	</td>
	<tr height="400px">
		<td width="20%"> </td>
		<td width="80%"> </td>
	</tr>
	<tr height="100%">
		<td colspan="2"> </td>
	</tr>
</table>
15、子元素和父元相邻素垂直外边距会发生重叠，子元素的外边距会传递给父元素。
使用空的table标签可以隔离父子元素的外边距，阻止外边距的重叠，经过修改clearfix
可以解决高度塌陷，又可以确保父元素和子元素的垂直外边距不会重叠
eg:
.clearfix:before,
.clearfix:after {
content:"";
display:table;
clear:both;
}
.clearfix{
zoom:1;
}


表单
1、用来提交信息，比如，办理银行卡申请，入学时填写的个人信息表。
2、在搜索框填写关键字后，点击搜索按钮关键字会提交到baidu的服务器
3、form标签中必须指定一个action属性，指向一个服务器的地址
4、input type属性text，eg 属性<input type="text" name="username">
5、提交按钮可以将表单中的信息提交给服务器，使用input创建一个提交按钮它的属性值是submit,<input tpe="submit"/>
6、提交到服务器，必须给表单项指定一个name属性，name表示提交内容的名字
7、<input type="submit" value="注册">
8、密码<input type="password" name="password">
9、单选按钮
性别<input type="radio"/>男
      <input type="radio"/>女
10、单选按钮通过name属性进行分组，name相同时一组按钮

多选框
1、使用input创建一个多选框，它的type属性使用checkbox
eg:
爱好 <input type="checkbox" name="hobby"/>足球
    <input type="checkbox" name="hobby"/>篮球
    <input type="checkbox" name="hobby"/>羽毛球
    <input type="checkbox" name="hobby"/>乒乓球


下拉列表
1、-使用select来创建一个下来列表
2、你喜欢的明星
<select name="star">	
3、单选或者多选按钮默认选中项，checked="checked"属性
4、可以通过option中添加selected="selected"来将选项设置为默认选中
5、select添加一个multiple="multiple"则下拉列表为一个多选的下拉列表
6、在select可以使用optgroup对选项进行分组，同一个optgroup中的选项是一组
7、可以通过label属性来指定分组的名字
8、eg:
<optgroup label="女明星">
</optgroup>
<optgroup label="男明星">
</optgroup>
9、label指定分组的名字，可以指定一个for属性，该属性的值需要指定一个表单项的id值
10、fieldSet为表单分组，表单项里同一组放到一个fieldSet中
11、fieldset 可以使用legend子标签来指定组名。
框架集和内联框架
框架集frameset：
1、框架集可以同时引用多个页面，推荐使用
2、不能和body出现在同一个页面中
3、使用frame子标签来指定需要引入的页面，引入几个页面就写几个frame
eg:
<frame src="01.表格.html">
4、属性row，指定框架集中的所有的框架，一行一行的排列 eg:row = "50% 50%"
5、属性cols指定框架中的所有页面，一列一列的排列cols = "50% 50%"
6、row和cols必须选择一个，并且需要在属性中指定每一部分所占的大小,有几个写几个%，可以使用*来代替
7、frameset中可以在嵌套frameset
8、和iframe一样，内容不会被搜索引擎检索，使用框架集则意味着页面中不能有自己的内容，只能引入其他的页面
没单独加载一个页面浏览器都需要重新发送一条请求，引入几个页面就需要发送几次网络请求，用户体验比较差，建议使用frameset不适用iframe

内联框架：
1、内联框架只能引入一个页面


IE6中
1、png24支持度不高，如果使用图片的格式为png24会导致透明效果无法正常显示
2、可以使用png8来代替png24，可以解决问题，但是使用png8代替png24以后，图片的清晰度会下降
3、使用javascript解决，在页面中引入一个外部的javascript文件，在写一下要处理的代码，
在body标签的最后引入外部的js文件


特殊处理
1、在某些情况下，有些特殊的代码，需要在特殊的浏览器中执行，而在其他的浏览器中不需要执行
这时就可以使用css hack来解决该问题。
hack只对IE浏览器有效，其他浏览器都会讲他识别为注释，IE10及以上不支持这种方式
eg:标签只会在ie9以下的浏览器中显示
<!-----[if IE6]>
<p>为了您和家人的健康，请远离ie6</p>
<![Enfif]>

2、添加_只在IE6及以下的浏览器识别eg：_background-color:yellow;
3、添加*样式只在IE7及以下的浏览器识别eg:*background-color:yellow;
4、在选择器前添加*html则该选择器只有IE6可以识别
5、css hack不到万不得已情况尽量不要使用


`id`、`class`和文件的命名规范
1、命名时尽量使用英文，可以使用拼音，但不要英文和拼音混用
2、命名格式，驼峰命名法，首字母小写，每个单词的开头字母大写eg：aaaBbbCcc,
也可以所有的字母都小写，单词之间使用_或-连接eg:aaa_bbb_ccc,aaa-bbb-ccc

css
1、样式编写到style属性中称为内联样式，不方便复用，只对当前的元素起作用
2、样式编写到head中的style标签，通过选择器同时为元素设置样式，推荐使用，可以使表现和结构分离
3、样式编写到外部css文件中，其他页面可以通过link引用外部样式表,最推荐使用的方式，利用浏览器的缓存加快访问速度
eg:<link ref="stylesheet" type="text/css" href="style.css">
语法：
选择器+声明块

span后的一个p元素设置背景颜色为黄
eg:
span+p {background-color:yellow;}

span后的所有的兄弟元素
语法：a~b{}
eg:
span~p {background-color:yellow;}

否定伪类
除了class值为hello的所有的p元素设置背景颜色为黄色
p:not(.hello){background-color:yellow;}

继承：
祖先元素的样式被后代元素所继承，并不是所有的样式都会被子元素所继承，比如背景、边框、定位相关的都不会被继承。


样式显示取决于优先级：
1、!important > 1000
2、内联样式的优先级 = 100
3、类和伪类优先级 = 10
4、元素选择器优先级 = 1
5、通配符 * 优先级为 = 0
6、继承的样式没有优先级

JavaScript
js特点：
1、解释型语言，不用编写完直接运行
2、类似于c和java的语法结构
3、动态语言
4、基于原型的面向对象
5、js严格区分大小写
6、每一句以分号结尾
7、js忽略多个空格和换行，所以我们可以利用空格和换行对代码进行格式化


1、<script type="text/jsavascript">
2、alert("弹框")
3、document.write()可以向body中输出一个内容
4、console.log()，控制开调试输出
5、可以将代码编写到onclick属性中，点击后执行js代码
6、可以将代码编写在超链接的href属性中，这样在点击超链接时，会执行js代码
eg:
<a href="javascript:alert("点我")">点标签</a>，虽然可以卸载标签的属性中，但是他们结构行为耦合，不方便维护，不推荐使用。
7、js编写到script标签里。
8、编写到外部js文件中，通过script标签引入，写到外部文件中，可以在不同的页面中同时引用，也可以利用浏览器的缓存机制
script标签一旦引入外部文件中了，就不能在script编写代码了，即使编写了浏览器也会忽略
如果需要可以创建一个新的script标签用于编写内部代码

eg:<script type="text/javascript" src="js/script.js"> </script>



字面值
1、一些不可能改变的值
2、1,2,3,4...
3、字面量都是可以直接使用，但是我们一般都不会直接使用字面量
4、变量可以用来保存字面量，变量的值可以任意改变。
变量
1、var 关键字声明,var a;
2、a=123，声明和赋值同时进行 var a = 123;
标识符
1、在js中所有的可以由我们自主命名的都可以成为是标识符
2、eg:变量，函数名，属性名都属于标识符
命名一个标识符时需要遵守如下规则：
1、标识符中可以包含字母、数字、_、$
eg:var a_1_$ = 123;
2、标识符不能以数字开头
3、标识符不能是关键字
4、标识符一般都是采用驼峰命名法，首字母小写，每个单词开头字母小写，其余字母小写 eg:`helloWorld`、 `xxxYyyZzz`

数据类型指的字面量的类型
js中一共有6中数据类型
1、String 字符串、Number 数值、Boolean 布尔值、Null 空值、undefined 未定义，属于基本数据类型
2、object 对象,属于引用数据类型
String
1、js中`String`需要使用引号引起来 eg: var str = "hello";
2、双引号或单引号都可以
3、引号不能嵌套，双引号不能放双引号，单引号不能放单引号

\转移字符
1、\\"表示"
2、\\'表示'
3、\n表示换行
4、\t制表符
5、\\表示\


Number
1、js中所有的数值都是number类型包括整数和浮点数(小数)
2、可以使用一个运算符typeof来检查一个变量的类型
3、console.log(typeof a);检查字符串会返回String，检查数值会返回number
4、JS可以表示数字的最大值，Number.max_value,如果使用number表示的数字超过了最大值，则会返回一个infinity
表示正无穷
eg:a=-Number.Max_value * numer.Max-value;会导致a = infinity;
5、使用typeof 检查infinity会返回number
6、使用typeof检查Nan会返回Number，NaN是一个特殊的数字，表示not A Number 
7、JS中整数的运算符基本可以保证精确
8、如果使用JS进行浮点运算，可能得到一个不精确的结果，所以千万不能使用js进行对精确度要求比较高的运算


Boolen布尔值
1、true,表示真
2、false，表示假
3、使用typeof检查一个布尔值时，会返回boolean


Null
1、值只有一个null，专门用来表示空对象
2、使用typeof检查一个null值，会返回object的underfined类型的值，只有一个就是underfined
当声明一个变量，但是并不给变量赋值时，它的值就是underfined,使用typeof检查一个underfined时会返回underfined

强制类型转换
1、指将一个数据类型强制转换为其他的数据类型
2、类型转换主要指，将其他的数据类型转换为String，Number，Boolean

将其他的数据类型转化为String
1、调用被转换数据类型的toString()方法
2、该方法不会影响到原变量，它会将转换为的结构返回
3、a=a.toString(); a=true; a = a.toString()

将其他的数据类型转换为String
1、toString()
2、该方法不会影响到原变量，它会将转换的结果返回
3、null和undefined这两个值没有toString()方法，如果调用他们的方法，会报错

将其他类型转换为Number
1、如果是纯数字的字符串则直接将其转换为数字
2、如果字符串有非数字的内容，则转换为NaN
3、如果字符串是一个空串或者是一个空格的字符串，则转换为0
4、调用number()函数来将a转换为number类型
5、a = Number(a)
6、布尔转换成数字1；true转换成1；false转换称为0；null转换为数字0；undefined转换为数字NaN

这张方式专门用来对付字符串
1、parseInt(),把字符串转换为整数
2、parseFloat(),把一个字符串转换为一个浮点数
3、如果对非String使用parseInt()或者parseFloat()会先将其转换为String，然后在操作


1、16进制,ox开头
2、8进制的数字,0开头
3、2进制数字，0b开头

将其他的数据类型转换为Boolean
1、使用Boolean()
2、数字转换为布尔，除了0和NaN，其余的都是true
3、字符串转换为布尔，除了空串，其余的都是true
4、null和underfined都会转换为false，对象会转换为true


运算度也叫操作符
1、对一个或者多个值进行运算
2、typeof，获取指的类型，他会将该值得类型以字符串的形式返回，Number String Boolean underfined Object 

算数运算符
1字符串+，拼接成一个新的字符串返回，
任何值和字符串做加法运算符都会先转为字符串，然后再和字符串做拼串的操作
任何值和NaN做运算符都的NaN
2、我们只需要为任意数据类型+"",即可转换为String,这种饮食的类型转换，由浏览器自动完成，
实际上它也是调用String()函数
var c = 123;
c = c + "";
result = 1 + 2 + "3"; // 33
result = "1" + 2 + 3; // 123
3、任何做-*/运算符时都会自动转换为Number
我们可以通过为一个值-0 * 1 / 来将其转换为Number()函数一样，使用起来更加简单
4、%,取模运算符(取余数)
5、正号不会对数字产生任何影响
6、负号可以对数字进行负号的取反



逻辑运算符
！:
1、!,对一个布尔值进行取反操作，ture->false,false->true
2、可以为一个任意数据类型取两次反，来将其转换为布尔值，原理和Boolean()函数一样
eg:var a = "hello"; a = !!a// true

&&:与
1、可以对符号两侧的值进行与运算并返回结果
2、如果两个值都是true。则返回true
3、var result = ture && true,只要有一个false,就返回false
4、js中&&属于短路的与，如果第一个值为false，则不会看第二个值

|| 或，可以对负号两侧值进行或运算并返回结果

1、另个值只要有一个ture，就返回true，如果两值都为false，则返回false
2、第一个值为false，则会检查第二个值，第一个值为true，不会检查第二个值


`&&`、`||`、 `!`、 bool值的情况
1、对于非布尔值进行与运算符时，会先将其转换为布尔值，然后在运算，并且返回原值
2、两个值都为true，则返回后边的
var result = 5&6 // 6

false && true

result = 0 && 2; // 0
result = 2 && 0;// 0
result = NaN && 0;// NaN
result = 0&&NaN;// 0

&& 与运算:
如果第一个值为ture,则必然返回第二个值
如果第二个值为false，则返回第一个值

|| 运算:
1、如果第一个值为true,则直接返回第一个值 
result = 2 || 1; // 2
result = 2 || NaN;// 2
result = 2 || 0; // 2
2、如果第一个值为false，则直接返回第二个值
result = NaN || 0; // NaN





1 > true ;false
1>= true; true
1 > 0; true
10 > nul; true
任何值和NaN做对比都是false
10 < "Hello" false
true > false; true
"1" < "5" ;true
"11" < "5"; true

1、如果符号两侧的值都是字符串时，不会将其转换为数字进行比较而会分别比较字符串中字符的unicode编码
比较字符串时，比较的是字符串的字符编码
比较字符编码时是一位一位进行比较
如果两位一样，则比价下一位，所以借用它对英文进行排序
2、如果比较的两个字符串型的数字，可能会得到不可预期的结果
3、在比较两个字符串型的数字时，一定要转型
4、相等运算符用来比较两个值是否相等，如果相等会返回true,否则返回false
使用==来做相等运算

a == 4;// false
"1" == 1;true
true == "1"; true
null == 0 ;false
underfined，衔生子null，undefined == null; true

判断b的值是否是NaN，通过isNaN()函数来判断一个值是否是NaN, isNaN()
NaN 不和任何值相等，包括他本身
NaN == NaN; false

"123" === 123;// false，类型不一样
null == undefined // true
null === undefined // false
不相等

=== 类型比较
!== 类型不相等直接返回true

JS运算优先级
1、var result = 1 || 2 && 3
2、如果||的优先级高或者一样高，则返回3
3、如果&&优先级高则返回1

1、prompt()可以弹出一个提示框，该提示框中会带有一个文本框，用户可以在文本框中输入一段内容
2、var score = prompt("请输入小明的期末成绩:")


in 运算符
1、-通过该运算符可以检查一个对象中是否含有指定的属性
2、有返回true,没有返回false
3、语法: "属性名" in 对象


函数
1、函数是一个对象
2、语法function ftName(形参1，...){}
3、使用函数表达式来创建一个函数 var 函数名 = function(形参1,...){}//匿名函数
4、(function(){})();函数定义完，立即被调用，这种函数叫做立即执行函数，往往只执行一次
5、作用域
1、全局作用域，直接编写在script标签的js代码，都在全局作用域内
2、全局作用域在页面打开时创建，在页面关闭时销毁
3、在全局作用域内有一个全局对象window，代表是浏览器的窗口，由浏览器创建可以直接使用
4、在全局作用中，创建的变量，都会为window对象的属性保存
5、全局作用域中的变量都是全局变量，在页面的任意的部分都可以访问到



变量的声明提前

1、使用var声明的变量，会在代码执行之前被声明，如果声明变量时不使用var关键字，则变量不会被声明提前
2、函数的声明提前，使用函数声明形式创建的函数function ftName(){} 他会在所有的代码执行之前就被创建
所以我们可以在函数声明前来调用函数，使用函数表达式创建的函数，不会被声明提前，不能再声明前调用

函数作用域
1、调用函数时创建函数作用域，函数执行完毕以后，函数作用域销毁
2、每调用一次函数，就会创建一个新的函数作用域，他们之间是相互独立的
3、函数作用域可以访问到全局作用域的变量，在全局作用域中无法访问到函数作用域的变量
4、当在函数作用域操作一个变量时，他会现在自身的作用域中寻找，如果有就直接使用，没有则向上一级作用域中寻找，
知道找到全局作用域，如果全局作用域中依然没有找到，则会报错referenceError
5、在全局作用域访问变量可以使用window对象
6、在函数作用域也有声明提前的特性，使用var关键字声明变量，会在函数中所有代码执行之前被声明，函数声明也会在函数中
所有的代码执行前执行
7、在函数中，不适用var声明的变量都会成为全局变量

this
1、函数内部有一个隐藏的this参数，this指向的是一个对象，成为函数执行的上下文对象，
2、根据函数的调用方式不同this指向不同的对象
3、以函数的形式调用时，this永远都是windwo
4、以方法的形式代用时，this就是调用的放的那个对象


this情况
1、当以函数的形式调用时，this时window
2、当以方法的形式调用时，谁调用方法this就是谁
3、当以构造函数的额形式调用时，this就是新创建的对象




构造函数
1、专门用来创建person对象的构造函数就是一个普通的函数
2、创建方式和普通的函数没有区别，不同点时。首字母大写
3、构造函数和普通幻术的区别就是调用方式不同，普通函数时直接调用，而构造函数需要使用
new关键字来调用
构造函数的执行流程
1、立即创建一个新的对象
2、将新建对象设置为函数中this，在构造函数中可以使用this来引用新建的对象
3、逐行执行函数中的代码
4、将新建的对象作为返回返回
5、我们通过一个构造函数创建的对象，成为该类的实例
6、语法：对象 instanceof构造函数,如果是，则返回true,否则返回false






