Create DataBase
Create Table
Create Index
Alter DataBase
Alter Table
Drop DataBase
Drop Table
Drop Index
Insert Into
Delete
Update
Select

菜鸟教程 SQL 函数 底部 ADO 教程 PHP教程

查询的关键词

Distinct (独一无二)
where（条件）
Where 子句的运算符
{
= 等于
<>不等于。注释在SQL的一些版本中，该操作符可被写成!=
>大于
<小于
>=大于等于
<=小于等于
Between and 在某个范围
Like 搜索某种模式
IN 指定针对某个列的多个可能值
}
Select name,country from web
Select *from web
在表中，一个列可能会包含多个重复值，有时您也许希望仅仅列出不同(distinct)的值。
Select DISTINCT name,country from web
Select *from web Where country=‘CN’;
{
Where + 条件（筛选行）
条件:列，比较运算符,值
Select *from emp Where sal > 2000 and sal < 30000;
Select *from emp WHere sal > 2000 or sal > 500;
Not:非满足不包含该条件的值。
Select *from emp where not sal > 1500;(查询emp表中小于等于1500的值)
逻辑运算的优先级:
（） not and or
	
特殊条件
1、空值判断: is null
Select *from emp where comm is null;
2、between and （在 之间的值）
Selct *from emp where sal between 1500 and 3000;(查询emp表中sal列中[1500,3000])
3、In
Select *from emp where sal in (5000,3000,1500);(查询EMP表SAL中等于5000，3000，1500的值)
4、like
Like模糊查询
Select *from emp where ename like 'M%';
(%表示多个值,_下划线表示一个字符;)
(M%:正则表达式，表示的意思为模糊查询信息为M开头的)
(%M%表示查询包含M的所有内容)
(%M_表示查询以M在倒数第二位的所有内容)

Where 子句并不一定带比较运算符，当不带运算符时，会执行一个隐式转换。当0时转换为false，1转换为true.

Select StudentNO FROM student where 0(则会返回一个空集，因为每一行记录where都返回false)
Select studentNO From student where 1(返回student表所有行中studentNO列的值。因为每一行记录WHERE返回true)

}


order by （关键字对结果进行排序,按照一个列或者多个列进行排序 默认按照升序排列 可配合DESC关键字)
Select column_name,column_name from table_name order by column_name,column_name ASC|DESC;
Order by A，B 这个时候都是默认按升序排列
order by A desc,B 这个时候A降序 B升序
order by A,B desc 这个时候A升序 B降序
即desc或者asc只对它紧跟着的第一个列明有效，其他不受影响,仍然是默认的升序。

Insert into语句
Insert into 语句可以有两种编程形式
insert into tb_name values(v1,v2,v3...);
Insert into tb_name (c1,c2,c3...) values (v1,v2,v3....)

Insert into select 和 select into from的区别

insert into scorebak select *from socre where neza='neza' --插入一行，要求表scorebak必须存在

Select * into scorebak from score where neza='neza' --也是插入一行，要求表corebak不存在

UPDate

Update tb_name set c1=v1,c2=v2,...where some_column=some_value;(注意后面的where子句!where子句规定那条记录或者那些记录需要更新。如果您省略了where子句，所有的记录都将被更新!)

值mySQL中可以通过设置Sql_safe_updaets 这个自带的参数来解决，该参数开启的情况下，你必须在update语句后携带where条件,否则就会报错。

Delete语句
Delete语句用于删除表中的行
Delete from tb_name where column=value;(注意SQL delete语句中的where子句规定哪些记录或者哪些记录需要删除。如果您省略了Where子句，所有的记录都将被删除!)

删除所有数据
可以在不删除表的情况下，删除表中所有行，这意味着表结构、属性、索引讲保持不变;
Delete from tb_name
或
Delete *from tb_name;（删除记录时格外小心！因为您不能重来!）


Select Top , Limit, ROWNUM 子句

Select Top 子句用于规定要返回的记录的数目。
Select top 子句对于拥有数千条的大型表来说，是非常有用的。
Select top number|percent column_name(s) from table_name;
(注意：并非所有的数据库系统都支持Select TOP语句。MySQL支持Limit语句来选取指定的条数数据，oracle可以使用ROWNUM来选取)
SQL Server / Ms Access 语句
SELECT top numnber|percent column_name(s) from tb_name;

MySQL语句
Select *from persons LIMIT 5;

Oracle语句
Select column_name(s) where ROWNUM <= number;
SELECT *from Persons Where ROWNUM <= 5;

Select TOP 50 Percent *from web;(下面的SQL语句从web中选取前面百分之50的记录)


Select TOP 5 *from table order by id desc ---desc 表示降序排列 asc 表示升序


LIKE

like操作符用于在where子句中搜索列中的指定模式。
Select *from web where name like 'G%';以G开头
Select *from web where name like '%k';以k结尾
select *from web where name like '%oo%';语句name包含oo的所有客户


通配符

% 代表0个或多个字符
- 代表一个字符
[charlist]字符列中的任何单一字符
[^charlist]或者[!charlist] 不再字符列表中的任何单一字符

SELECT *from web where url like 'https%'

使用SQL _通配符
下面的SQL语句选取name以一个任意字符开始,然后是'oogle'的所有客户
Select *from web where name like '_oogle'

下面的SQL语句选取name以‘G’开始，然后是一个任意字符,然后是'o',然后是一个任意字符
然后是'le'的所有网站;
Select *from web where name like 'G_o_le';

使用SQL [charlist]通配符
mySQL中使用REGEXP或者Not REGEXP运算符(或Rlike和NOTRlike)来操作表达式。
下面的SQL语句选取name以 ‘G’、'F'，‘S’开始的所有网站:
Select *from websites where name REGEXP '^[GFs]'

下面的SQL语句选取name以A到H字母开头的网站:
SELECT *from web where name REGEXP '^[A-H]'
下面的SQL语句选取name不以A到H字母开头的网站:
SELECT *from web where name REGEXP ‘^[^A-H]’

IN 操作符
In操作符允许您在Where子句中规定多个值。
SELECT column_name(s) from table_name where column_name IN (value1,value2,...);


IN操作符实例
SELECT *FROM Web WHERE name IN ('Google','菜鸟教程');

IN与=的异同
相同点：均在Where中使用作为筛选条件之一、均是等于的含义
不同点：IN可以规定多个值，等于规定一个值


Between 操作符
操作符用于选取介于两个值之间的数据范围内的值。

下面的SQL语句选取Alexa介于1和20之间的所有网站(包括1和20):
SELECT *from Web where Alexa between 1 and 20;

如需显示不在上面实例范围内的网站，请使用NOT Between
NOT Between 操作符实例
Select *from Web where alexa NOT Between 1 and 20;

带有IN的Between操作符实例
(下面的SQL语句选取Alexa介于1和20之间但country不为USA和IND的所有网站):
select *from web where (Alexa between 1 and 20) and country NOT In ('USA','IND');

带有文本值的BETWEEN操作符实例
选取name以介于'A'和'H'之间字母开始的所有网站
SELECT *from websites where name between 'A' and 'H';

带有日期值得Between操作符实例
Select *from access_log where date Between '2016-05-10' and '2016-05-14';
列的SQL别名语法
Select column_name as alias_name from table_name;
表的SQL别名语法
SELECT column_name(s) from table_name as alias_name;

下面的SQL语句指定了两个别名，一个name列的别名，一个是country列的别名。提示：如果列名称包含空格，要求
使用双引号或方括号：
SELECT name AS n, country as c from web;
在下面的SQL语句中，我们把三个列(url、Alexa、country)结合在一起，并创建一个名为'size_info'的别名:
select name,concat（url,',',Alexa,','country）AS site_info from web;



下面的SQL语句选取'菜鸟教程的所有访问记录'我们使用'websites'和'assess_log'表，并分别为它们指定表别名'w'和
'A'（通过使用别名让SQL更简短）:
SELECT w.name,w.url,a.count,a.date from web as w,access_log as a where a.size_id=w.id 
And w.name="菜鸟教程"

Select websites.name,websites.url,access_log.count,access_log.date from websites,access_log where websites.id=access_log.site_id and websites.name='菜鸟教程';


Select websites.id,websites.name,access_log.count,access_log.date from web inner join access_log on websites.id=access_log.site_id;

Inner join：如果表中有至少一个匹配，则返回行
LEFT JOIN: 即使右表中没有匹配，也从左表返回所有的行
RIGHT JOIN:即使左表中没有匹配，也从右表返回所有的行
FULL JOIN:只要其中一个表中存在匹配，则返回行


ex:
select column_name(s) from table1 inner join table2 on table1.column_name=table2.column_name;
或者：
Select column_name(s) from table1 join table2 on 
table1.column_name=table2.column.column_name;

Select web.name,access_log.count,access_log.date from web inner join access_log
On web.id=access_log.site_id order by access_log.count;

在使用join时，on和where条件的区别如下:
1、on条件是在生成临时表时使用的条件，它不管on中的条件会否为真，都会返回左边表中的记录。
2、where条件是在临时表生成好后，在对临时表进行过滤条件。这时已经没有left join的含义(必须返回左边表的记录)了，条件不为真的就全部过滤掉。


LEFT JOIN语法

Select column_name(s) from table1 left join table2 on table1.column_name=table2.column_name;

LEFT JOIN 关键字从左表(Websites)返回所有的行，即使右表(access_log)中没有匹配

RIGHT JOIN语法
Select column_name(s) FROM table1 right join table2 on table1.column_name=table2.column_name;
RIGHT JOIN 关键字从右表(websites)返回所有的行，即使左表(access_log)中没有匹配。

FULL OUTER JOIN 关键字

Select column_name(s) from table1 full outer join table2 on table1.column_name=table2.column_name;
FULL outer join 关键字返回左表(websites)和右表(access_log)中所有的行。如果websites表中的行在"access_log"中没有匹配或者"access_log"表中行在"websites"表中没有匹配，也会列出这些行。

SQL UNION操作符合合并两个或者多个SELECT语句结果。
Select column_name(s) from table1 union select column_name(s) from table2;
注释:默认地，UNION操作符选取不同的值。如果允许重复的值，请使用UNION ALL。
SELECT column_name(s) from table1 union all select column_name(s) from table2;

SELECT INTO 语句
通过SQL，您可以从一个表复制信息到另一个表。
SELECT INTO 语句从一个表复制数据，然后把数据插入到另一个新表中。
注意：
MYSQL数据库不支持SELECT...INTO语句，但支持Insert into ... select。当然你可以使用一下语句来拷贝表结构及数据。

当然你可以使用一下语句来拷贝表结构及数据：
CREATE TABLE 新表
AS
SELECT *FROM

我们可以复制所有的列插入到新表中
Select into newtable [in externaldb] from table1;
或者只复制希望的列插入到新表中
Select column_name(s) INTO newTable [IN externaldb] from table1;
提示：新表将会使用SELECT语句中定义的列名称和类型进行创建。可以使用AS子句来应用新名称。

创建websites备份复件：
SELECT  Into WebsitesBackup2016 from websits;
只复制一些列插入到新表中：
SELECT name,url INTO websitesBackup2016 from websites;
只复制中国的网站插入到新表中：
SELECT INTO WebsitsBackup2016 from websites WHERE country='CN';
复制多个表中的数据插入到新表中:
SELECT webSites.name,access_log.count,access_log.date INTO websitesBackup2016 From websites
LEFT JOIN access_log ON websites.id=access_log.site_id;
提示：SELECT INTO 语句可用于通过另一种模式创建一个新的空表。只需要添加促使查询没有数据返回的WHERE子句即可：
SELECT INTO newtable from table1 where 1=0;


INSERT INTO SELECT 语句
通过SQL，您可以从一个表复制信息到另一个表。
INSERT INTO SELECT语句从一个表复制数据，然后把数据插入到一个已经存在的表中。目标表中任何已经存在的行都不会受到影响。

Insert into table2 select *from table1;
Insert into table2 (column_name(s)) SELECT column_name(s) From table1;

实例
Insert into websites (name,country) select app_name,country from apps;
只复QQ的APP到Websites中
Insert Into websites (name,country) select app_name,country from apps where id=1;

select into from 和 insert into select 都是用来复制表
两者的主要区别：select info from 要求目标表不存在，因为在插入时会自动创建；Insert into select from 主要目标存在。

1、复制表结构及其数据：
Create table table_name new as select *from table_name_old;
2、复制表结构
Create table table_name new as select *from table_name_old where 1=2;
3、只复制表数据：
如果两个表结构一样：
Insert into table_name_new select *from table_name_old;
如果两个表结构不一样：
Insert into table_name_new (column1,column2...) select column1,column2...from table_name_old;
稍微整理一下 select into from 和 insert into select的理解层面的区别
Select into from: 讲查询出来的数据整理到一张新表中保存，表结构与查询结构一致。
Select (查询出来的结果) into newtable （新的表中）from where （后续条件）
即，查询出来结果-->复制一张同结构的空表-->将数据拷贝进去。
Insert into select: 为已经存在的表批量添加新数据。

Insert into （准备好的表）select *(或者取用自己想要的结构)from 表名 where 各种条件

即，指定一样想要插入数据的表格--->对数据进行加工筛选->填入一张准备好的表格。


CREATE DATABASE 语法

Create database dbname;

Create database my_db;

CREATE TABLE 语句
CREATE TABLE table_name (
column_name1 data_type(size),
Column_name2 data_type(size),
Column)name3 data_type(size),
...
);

column_name 参数规定表中列的名称。
data_type 参数规定列的数据类型（例如varchar、integer、decimal、date等等）。
Size参数规定表中列的最大长度。

CREATE TABLE Person
(
PersonID int,
LastName varchar(255),
FirstName varchar(255),
Address varchar(255),
City varchar(255)
);

SQL约束(constraints)
SQL约束用于规定表中的数据规则。
如果存在违反约束的数据行为，行为会被约束终止。
约束可以在创建表时规定（通过CREATE TABLE语句），或者在表创建之后规定(通过alter table语句)。
CREATE TABLE table_name
(
column_name1 data_type(size)constraint_name,
column_name2 data_type(size)constraint_name,
column_name3 data_type(size)constraint_name,
...
);

SQL中约束如下
NOT NULL -指定某列不能存储NULL值。
Unique -保证某列的每行必须有唯一的值。
Primary key -NOT NULL 和 Unique的结合。确保其列(或两个列多个列的结合)有唯一标识，有助于更容易更快速地找到表中的一个特定的记录。
Check -保证列中的值符合指定条件。
Defalut -规定没有给列赋值时的默认值。

Primary key约束的实例

Create table persons 
(
Id_P int not null,
LastName varchar(255) NOT NULL,
FirstName varchar(255),
Address varchar(255),
City varchar(255),
Primary key (Id_P)// Primary KEY约束
)

CREATE TABLE Persons
(
Id_P int NOT NULL Primary key,// Primary key 约束
LastName varchar(255）NOT NULL,
FirstName varchar(255),
Address varchar(255)
)

SQL NOT NULL 约束
CREATE TABLE Persons
(
ID int NOT NULL,
LastName varchar(255) NOT NULL,
FirstName varchar(255) NOT NULL,
Age Int
);
在一个已经创建的表中的“Age”字段中天健NOT NULL约束如下所示：
实例
Alter table Persons modify Age int NOT NULL;
删除 NOT NULL约束
在一个已创建的表的“Age”字段中删除NOT NULL约束如下所示：
Alter Table Person Modify Age Int NULL;

UNIQUE约束
CREATE TABLE时的SQL UNIQUE约束

Create Table Persons
(
P_Id int NOT NULL UNIQUE,
LastName varchar(255) NOT NULL,
FirstName varchar(255),
Address varchar(255),
City varchar(255)
)
当表已被创建时，如需在“P_Id”列创建UNIQUE约束，请使用下面的SQL：
Alter Table Persons ADD UNIQUE(P_Id)
如需命名UNIQUE约束，并定义多个列的UNIQUE约束，请使用下面的SQL语法：
Alter TABLE Persons ADD Constaraint uc_presonID unique (P_ID,LastName)
撤销UNIQUE约束
如需撤销UNIQUE约束，请使用下面的SQL：
MySQL:
Alter Table Persons DROP Index uc_PersonID
SQL Server / oracle/ ms Access:
Alter Table Persons Drop Constraint uc_PersonID


Primary Key 约束
约束唯一标识数据库中的每条记录
主键必须包含唯一的值。
主键列不能包含NULl值。
每个表都应该有一个主键，并且没一个表只能有一个主键。

MYSQL:

Create Table Persons
(
P_Id Int not null,
LastName varchar (255) not null,
Address varchar（255）,
City varchar（255），
Primary key (p_id)
)
SQL Server / oracle/ MS Access:

CREATE table Persons
(
P_Id Int Not Null Primary key,
LastName varchar(255) not null,
firstName varchar(255),
Address varchar(255),
City varchar(255)
)
如需命名Primary key约束，并定义多个列的Primary key约束，请使用下面的sql语法：
create table persons
(
P_Id int not null,
LastName varchar(255) not null,
firstName varchar(255),
Address varchar(255),
City varchar(255),
Constraint pk_personID Primary key (P_Id,LastName)
)
注释：在上面的实例中，只有一个主键Primary key (pk_personID)。然而，pk_PersonID的值是由两个列（P_Id和LastName）组成的。

当表已被创建时，如需在"P_Id"列创建Primary key约束,请使用下面的SQL：
MySQL / SQL Server / Oracle / MS Access:
Alter table Persons add Primary key (p_id)
如需命名Primary key约束，并定义多个列的Primary key约束，请使用下面的SQL语法：
MySQL / SQL Server/ Oracle / MS Access:
ALTER Table Persons add constraint pk_personID Primary key (P_Id,LastName)
注释：如果您使用Alter TABLE 语句添加主键，必须把主键列明为不包含NULL值(在表首次创建时)。
如需撤销Primary key约束，请使用下面的SQL：
MySQL:
Alter Table Persons Drop Primary key
SQL Server / Oracle / MS Access:

Alter Table Persons Drop constraint pk_personID


撤销Primary key约束时，约束条件为一列还是多列，对于MySQL，撤销都是
Alter Table Persons Drop Primary key
由于Primary key 唯一性，MySQL处理办法简单。
但对于SQL Server/ Oracle/ MS Access,一个列
alter table persons Drop constraint P_Id
若起约束名，也可如下多个列
Alter table Persons Drop Constraint pk_personID


Foreign key约束
一个表中的foreign key指向另一个表中的Unique key 唯一约束的键。
Foreign key约束用于预防破坏表之间连接的行为。
foreign key约束也能防止非法数据插入外键列，因为它必须是指向的那一个表中的值之一。
MySQL：
Create Table Orders 
(
 O_Id int NOT NULL,
 OrderNo Int NOT NULL,
 P_Id int,
 Primary key (O_id),
 Foreign key (p_id) peferences Persons (p_id)
)
SQL Server / Oracle / MS Access：

Create table orders
(
O_Id Int NOT Null Primary key,
OrderNo int NOT NULL,
P_Id int Foreign key peferences Persons (P_Id)
)


SQL CREATE INDEX 语句
Create Index语句用于在表中创建索引。
在不读取整个表的情况下，索引使数据库应用程序可以更快地查询数据。
索引
你可以在表中创建索引，所以更加快速高效查询数据。
用户无法看到索引，他们只能被用来加速搜索/查询。
注释：更新一个包含索引的表需要比更新一个没有索引的表花费更多的时间，这是由于索引本省也需要更新。
因此理想的做法是仅仅在常备搜索的列（以及表）上面创建索引。
SQL Create Index 语法
在表上创建一个简单的索引。允许使用重复的值:
Create Index Index_name on table_name (column_name)

SQL Create Unique Index 语法
在表上创建一个唯一的索引。不允许使用重复的值：唯一的索引意味着两个行不能拥有相同的索引值。
Create a unique index on a table. 重复的值是不被允许的
Create unique index index_name on table_name (column_name);
注释：用于创建索引的语法在不同的数据中不一样。因此，检查您的数据库中创建索引的语法。
下面的SQL语法在persons表的“LastName”列上创建一个名为"PIndex"的索引：
Create Index Pindex On Persons (LastName)
如果希望索引不止一个列，你可以在括号里列出这些列的名称，用逗号隔开。
Create Index Pindex On Persons （LastName，FirstName）
SQL 语句撤销索引，撤销表以及撤销数据库。
通过使用DROP语句，可以轻松地删除索引、表和数据库。

DROP Index语句
DRop Index语句用于删除表中的索引。
用于 MS Access 的 DROP INDEX 语法：
Drop Index Index_name on table_name;
用于Ms SQL server的Drop index语法：
Drop index table_name.index_name;
用于 DB2/Oracle 的 DROP INDEX 语法：
Drop Index index_name
用于MySQL的Drop index语法：
Alter table table_name drop index index_name

DROP TABLE 语句

drop table table_name
drop dataBase database_name

Truncate table 语句
如果我们仅仅需要删除表内的数据，但并不删除表本身，那么我们该如何做呢？
Truncate table table_name



Alter Table 语句
用于在已有的表中添加、删除或修改列。
SQL Alter Table语法：
Alter Table table_name add column_name dataType;
如需删除表中的列，请使用下面的语法(请注意，某些数据库系统不允许这种在数据库中的删除列的方式)：
ALTER TABLE table_name Drop column column_name
要改变表中列的数据类型，请使用下面的语法:
SQL Server / MS Access：
Alter table table_name Alter column column_name datatype
My SQL / Oracle：
Alter table table_name modify column column_name datatype
Oracle 10G 之后版本:
Alter table table_name modify column_name datatype;

现在，我们想要在"persons"表中添加一个名为"dateOfBirth"的列
我们使用下面的SQL语句:
Alter Table Persons ADD DateofBirth date

改变数据类型实例
现在，我们想要改变"Persons表中" “DateOfBirth”列的数据类型。
我们使用下面的SQL语句：
Alter table Persons Alter Column DateOfBirth year
请注意，现在“我们想要删除"person"表中的”DateofBirth"列。
我们使用下面的SQL语句：
Alter TABLE persons Drop Column DateOfBirth

SQL AUTO Increment 字段
Auto-increment 会在新记录插入表中时生成一个唯一的数字。
Auto increment 字段
我们通常希望在每次插入新的记录时，自动地创建主键字段的值。
我们可以在表中创建一个auto-increament字段。
用于MySQL的语法
下面的SQL语句把 "Persons"表中的“ID”列定义auto-increment主键字段：
Create Table Persons
(
ID int NOT NULL Auto_increment,
LastName varchar(255) not null,
firstName varchar(255),
Address varchar(255),
City varchar(255),
Primary key(id)
)
MySQL 使用 AUTO_INCREMENT 关键字来执行 auto-increment 任务。
默认地，auto_increament的开始值是1，每条新记录递增1。
要让auto_increment 序列以其他的值开始，请使用下面的SQL语法：
Alter Table Persons auto_Increment=100;
要在"persons"表插入新纪录，我们不必为"ID"列规定值(会自动添加一个唯一的值):
Insert Into Persons (FirstName,LastName)values(’Lars‘,'Monsen')
上面的SQL语句会在"Persons"表中插入一条新纪录。"ID"会被赋予一个唯一的值。"FirstName"列会被设置为"Lars"，"LastName"列会被设置为"Monsen"。
用于SQL server的语法
下面SQL语句把 "Persons"表中的"ID"列定义为auto-increment主键字段：
Create table presons 
(
ID int IDENTITY(1,1) Primary key,
LastName varchar(255) not null,
firstName varchar(255),
Address varchar(255),
City varchar(255)
)

给已经存在的colume添加自增语法：
Alter Table table_name change column_name column_name data_type(size) constraint_name auto_increment;
比如：
Later table student change id id INT (11) NOT NULL AUTO_INCREMENT;

SQL 试图 (Views)
试图是可视化的表。
本章讲解如何创建，更新和删除试图。
在SQL中，试图是基于SQL语句结果集的可视化的表。
视图包含行和列，就像一个真实的表。视图中的字段就是来自一个或者多个数据中的真实的表中的字段。
你可以向试图添加SQL函数、Where以及JOIN语句，也可以呈现数据，就像这些数据来自于某个单一的表一样。
Create View view_name AS Select column_name(s) from  table_name where condition
注释：视图总是最新的数据！每当用户查询视图时，数据库引擎通过使用视图的SQL语句重建数据。

SELECT *from orders Where orderDate='2018-11-11'
Select *from orders where orderDate='2008-11-11 00:00:00'


SQL NULL值

NULL 值代表一楼的位置数据
默认地，表的列可以存放NULL值。
本章讲解IS NULL和 IS NOT NULL操作符

NULL值得处理方式与其他值不同。
NULL用作未知的或不使用的值得占位符。
注释：无法比较NULL和0；他们是不等价的。
假如“Persons表中的”"Address"列是可选的。这意味着如果在“Address”列插入一条不带值的记录，“Address”列会使用NULl只保存。
那么我们如何测试NULL值呢？
无法使用比较运算符来测试NULL值，比如=、<或<>。
我们必须使用IS NULL和 IS NOT NULL 操作符
我们如何仅仅选取在"Address"列中带有NNULL值得记录呢?
我们使用IS NULL操作符：
SELECT LastName,FirstName,Address From Persons Where Address is NULL
提示：请示中使用is NULL来查找NULL值。
SELECT LastName,FirstName,Address from Persons Where address is not null

SQL NULL函数
SQL ISNULL()、NVL()、IFNULL()和coalesce()函数


SQL Count()函数
Count()函数返回匹配指定条件的行数。
COUNT(column_name)函数返回指定列的值得数目(NULL 不计入):
Select count(column_name) from table_name;
Count(*)函数返回表中的记录数：
Select count(*) from table_name;
Count(Distinct column_name) 函数返回指定列的不同值得数目：
Select count(Distinct column_Name) from table_name;

下面的SQL语句计算"access_log"表中"site_id"=3的总访问量:
实例
Select count(count) as nums from access_log where site_id=3;
下面的SQL语句计算"access_log"表中总记录数；
Select count(*)as nums from access_log;
下面的SQL语句计算"access_log"表中不同siet_id的记录数:
Select count (distinct site_id) as nums from access_log;

First()
LIMIT 语句 查询一条记录
select name from websites order by id asc LIMIT 1;
Last()
下面的SQL语句选取"Websites"表的"name"列中最后一个记录的值：
Select name from websites order by id DESC LIMIT 1;

MAX()函数
MAX()函数返回列指定列的最大值。
Select MAX(column_name) from table_name;
下面的SQL语句从"Websites"表的"alexa"列获取最大值：
Select max(alexa) as max_alexa from websites;

MIN()函数
MIN()函数返回指定列的最小值。
SELECT MIN（column_name）from table_name;

下面的SQL语句从"Websites"表的"alexa"列获取最小值:
Select MIN(alexa)as min_alexa from websites;
SUM()函数
SUM()语法
Select SUM(column_name) from table_name;
下面的SQL语句查找"access_log"表的"count"字段的总数；
Select sum(count)as nums from access_log;
统计access_log各个site_id的访问量:
Select site_id,SUM(access_log.count)AS nums from access_log group by site_id

SQL Group By 多表连接
下面的SQL语句统计有记录的网站的记录数量：
SELECT websites.name,Count(access_log.aid)as nums from access_log Left join websites on access_log.site_id=websites.id group by websites.name

SQL having子句
在SQL中增加HAVING子句原因是，Where关键字无法与聚合函数一起使用。
Having子句可以让我们筛选分组后的各组数据。
SELECT column_name,aggregate_function(column_name) from table_name where column_name operator value group by column_name Having aggregate_function(column_name) operator value;

我们使用下面的SQL语句：
Select websites.name,websites.url,sum(access_log.count)as nums from (access_log inner join websites on access_log.site_id=websites.id) group by websites.name having sum(access_log.count)>200;


SQL Exists运算符
EXISTS运算符用于判断查询子句是否有记录，如果有一条或多条记录存在返回ture，否则返回False。
Select column_name(s)from table_name where Exists (select column_name from table_name where condition);

现在我们想要查找总访问量大于200的网站是否存在。
我们使用下面的SQL语句：
Select websites.name,websites.url from websites where Exists (select count from access_log where websites.id=access_log.site_id and count > 200)

Exists可以与NOT一同使用，查出不符合查询子句的记录:
Select websites.name,websites.url from websites where NOT Exists (select count from access_log where websites.id=access_log.site_id and count > 200);

UCASE()函数
SQL UCASE()语法
Select ucase(column_name) from table_name;
用于SQL Server的语法
Select upper(column_name) from table_name;

SQL UCASE()实例
Select ucase(name) as site_titile,url from websites;
SQL LCASE()函数
LCASE()函数
LCASE()函数把字段的值转换为小写。
SQL LCASE()语法
Select LCASE(column_name) from table_name;
用于 SQL Server 的语法
SELECT LOWER(column_name) FROM table_name;
下面的SQL语句从websites表中选取"name""url"列，并把"name"列的值转换为小写：
Select LCASE(name) as site_title,url from websites;
MID()函数
MID()函数用于从文本字段中提取字符。
Select MID(column_name,start[,length])from table_name;
column_name 	必须。要提取字符的字段。
Start 		必须。规定开始位置(其实值是1)
Length		可选。要返回的字符数。如果省略，则MID()函数返回剩余文本。
下面的SQL语句从"websites"表的"name"列中提取前4个字符:
Select MID(name,1,4) as shortTitle from websites;(提取前四个字符)

SQL len()函数
lenght()函数
Len()函数返回文本字段中值的长度。
SQL LEN()语法
select LEN(column_name) from table_name;
MySQL中函数为LENGTH();
Select Length(column_name) from table_name;
Select name,length(url) as lenghtOfURL from websites;

SQL round()函数
round()函数
round()函数用于把数值字段舍入为指定的小数位数。
Select round(column_name,decimals) from table_name;
column_name:必须。要舍入的字段。
Decimals:必须。规定要返回的小数位数。

Round(x):返回参数x的四舍五入的一个个整数。
Select round(-1.23);
->-1;
Select round(-1.58);
->-2;
Select round(1.58);
->2

round(X,D):返回参数X的四舍五入的有D位小数的一个数字。如果D为0，结果将没有小数点或小数部分。
select round(1.298,1)
->1.3
Select round(1.298,0)
->1
Select now() from table_name;
在本教程中，我们将使用runoob样本数据库。
下面的SQL语句从"websites"表中选取name,url,当天日期：
Select name,url,Now() as date from websites;

Select name,url,Now() as date from websites;


SQL format()函数
Select format(column_name,format)from table_name;
column_name 	必需。要格式化的字段。
Format		必需。规定格式。
下面的SQL语句从"websites"表中选取name,url自己格式化为YYYY-MM-DD的日期:
Select name,url,Date_format(Now(),'%Y-%m-%d'AS date from websites;



SQL 快速参考
AND/OR:
Select column_name(s) from table_name where condition and|or condition;
Alter table:
Alter table table_name add column_name datatype or 
Alter table table_name drop column column_name
AS(alias):
Select column_name as column_alias from table_name or
Select column_name from table_name as table_alias
Between:
select column_name(s) from table_name where column_name between value1 and value2
Create table:
Create table table_name
(
column_name1 data_type,
column_name2 data_type,
column_name3 data_type,
...
)
 	
Create Index:
Create Index Index_name on table_name(column_name) or
Create unique index index_name on table_name(column_name)

Create View
Create View view_name as select column_name(s) from table_name where condition

Delete:
Delete from table_name where some_column=some_value or
Delete from table_name(note:deletes the entire table!!)
Delete *from table_name
(Note:Deletes the entire table!!)

Drop database:
Drop Database database_name
Drop Index

...
SQL主机

如果想要您的网站存储数据在数据库并从数据库显示数据，您的web服务器必需能使用SQL语言访问数据库系统。
如果您的web服务器托管到互联网服务提供商(ISP,quanquan)




