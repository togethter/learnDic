1、@dynamicCallable
1.1、介绍
@dynamicCallable为Swift添加了一个新属性, 允许使用一个简单的语法糖调用函数一样调用命名类型
如果需要添加@dynamicCallable属性, 就必须要实现以下方法中的一个或者两个
func dynamicallyCall(withArguments args: [Int]) -> Double
func dynamicallyCall(withKeywordArguments args: KeyValuePairs<String, Int>) -> Double
1.2、举例子
1.2.1、Swift 5.0之前的定义和调用方式
// 定义方式
struct RandomNumberGenerator {
    func generate(numberOfZeroes: Int) -> Double {
        let maximum = pow(10, Double(numberOfZeroes))
        return Double.random(in: 0...maximum)
    }
}
// 调用方式
let random = RandomNumberGenerator()
let num = random.generate(numberOfZeroes: 2)
print(num)
1.2.2、在Swift 5.0使用@dynamicCallable属性
// 定义方式
@dynamicCallable
struct RandomNumberGenerator {
    func dynamicallyCall(withArguments args: [Int]) -> Double {
        let numberOfZeroes = Double(args.first ?? 0)
        let maximum = pow(10, numberOfZeroes)
        return Double.random(in: 0...maximum)
    }
}
// 调用方式
let random = RandomNumberGenerator()
let num = random(2)
// random(2)等同于random.dynamicallyCall(withArguments: [2])
print(num)
1.3、@dynamicCallable使用注意事项
1.3.1、可以将它应用于结构，枚举，类和协议。
1.3.2、如果你实现withKeywordArguments:并且没有实现withArguments:，你仍然可以在没有参数标签的情况下调用
1.3.3、如果你的实现withKeywordArguments:或withArguments:时标记为throw，则调用该类型也将被抛出throw
1.3.4、扩展名无法添加@dynamicCallable，只能添加到主要类型上
1.3.5、仍然可以为你定义的类型添加其他方法和属性，并且能够正常使用


2、在Swift 5中新增了一个函数count(where:), 可以获取数组中符合条件的元素的个数
2.1举例子
let arr = [1, 2, 34, 5, 6, 7, 8, 12, 45, 6, 9]
let count = arr.count(where: { $0 > 10 })
print(count)  // 3

3、该方法可以检查一个整数是否为另一个整数的倍数
3.1、举例子
let rowNumber = 4
if rowNumber.isMultiple(of: 2) {
    print("Even")// 偶数
} else {
    print("Odd") // 基数
}
// 该方法等效于
if rowNumber % 2 == 0 {}

4、try? 
在Swift4.2及其之前的版本中, 上面返回的是一个2层嵌套的可选值, 如果有多层嵌套处理起来也是相当更麻烦的
在Swift 5中就完美的解决了这个问题, 如果当前值是可选的, 那么try?将不会将值包装在可选值中, 因此最终结果只是一个String?
因此在Swift 5中无论有多少可嵌套的可选最后, 返回值永远只是一个可选值
同样，如果你使用了可选的链接as?，你仍然只有一个级别的可选性

5、enum
5.1、swift5之前
enum X {
    // 此处定义切没有调用时不会报错
    case foo(bar: Int...) 
}
func baz() -> X {
    // 此处调用时会报错
    return .foo(bar: 0, 1, 2, 3) 
}

5.2、swift5之后
enum X {
    case foo(bar: [Int]) 
} 

func baz() -> X {
    return .foo(bar: [0, 1, 2, 3]) 
}

6、\处理
6.1、文字引用类型
// 错误写法
let quote = "Alice: "How long is forever?" White Rabbit: "Sometimes, just one second.""
// 正确写法
let quote1 = "Alice: \"How long is forever?\" White Rabbit: \"Sometimes, just one second.\""


6.2、正则表法式类型
// 错误写法
let ucCaseCheck = "enum\s+.+\{.*case\s+[:upper:]"
// 正确写法
let ucCaseCheck = "enum\\s+.+\\{.*case\\s+[:upper:]"

7、#处理
7.1.1、要使用原始字符串, 可使用#将字符串包裹起来
7.1.2、#字符串开头和结尾的符号成为字符串分隔符的一部分，因此如下Swift理解“rain”和“Spain”周围的独立引号应该被视为文字引号而不是结束字符串
7.1.3、原始字符串也允许使用反斜杠, 但是将反斜杠视为字符串中的文字字符，而不是转义字符

let rain = #"The "rain" in "Spain" falls mainly on the Spaniards."#
let keypaths = #"Swift keypaths such as \Person.name hold uninvoked references to properties."#
let answer = 42
let dontpanic = #"The answer to life, the universe, and everything is \#(answer)."#
7.2.1、注意
上面使用\#(answer)引用变量而不是\(answer), 因为在用#包裹的字符串中反斜杠将会被失败别为文字字符而不是转义字符, 所以必须额外的添加#

8、##处理
在字符串的开头和结尾使用#处理, 在字符串中可以使用反斜杠等特殊字符, 那如果字符串中需要使用#, 又该如何处理??
使用#包裹字符串, 默认会以#为字符串的结束符号, #后面的文字将不再处理, 在这种情况下, 我们会使用##处理
注意: 字符串的开头和结尾的标识必须一样

let str = ##"My dog said "woof"#gooddog"##

多行字符串
原始字符串与Swift的多行字符串系统完全兼容 - 只需用于#"""启动，然后"""#结束

let multiline = #"""
    The answer to life,
    the universe,
    and everything is \#(answer).
    """#

9、在Swift 5中不再支持返回Self的类方法
// 不在支持
class Base { 
    class func factory() -> Self { /*...*/ }
}


10、不同文件中的扩展名无法相互识别
class FirstClass { }

extension FirstClass {
    class SecondClass { }
}

// 这里将会报错: "SecondClass is not a member type of FirstClass"
extension FirstClass.SecondClass { 
    class ThirdClass { }
}

11、在Swift5中, 在所声明的类里面, 所声明的变量名不能和类名一样
struct S {}
extension S {
  static var i: Int { return 0 }
  struct i {} // error: “i”的声明无效
}

// 下面的方式是没有问题的
struct S1<T> {}
extension S1 {
  static var i: Int { return 0 }
  struct i {} // This is fine!
}

